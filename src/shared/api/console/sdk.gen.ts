// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { AccountLogoutData, AccountLogoutErrors, AccountLogoutResponses, AddProjectParticipantData, AddProjectParticipantErrors, AddProjectParticipantResponses, AdminChargeProjectData, AdminChargeProjectErrors, AdminChargeProjectResponses, AdminGetLiteproxyPrivateKeysData, AdminGetLiteproxyPrivateKeysErrors, AdminGetLiteproxyPrivateKeysResponses, AdminGetProjectBalanceData, AdminGetProjectBalanceErrors, AdminGetProjectBalanceResponses, AdminGetTonSitesData, AdminGetTonSitesErrors, AdminGetTonSitesResponses, AdminMessagesChargeProjectData, AdminMessagesChargeProjectErrors, AdminMessagesChargeProjectResponses, AuthGeneratePayloadData, AuthGeneratePayloadErrors, AuthGeneratePayloadResponses, AuthViaTgData, AuthViaTgErrors, AuthViaTgResponses, AuthViaTonConnectData, AuthViaTonConnectErrors, AuthViaTonConnectResponses, BuyMessagesPackageData, BuyMessagesPackageErrors, BuyMessagesPackageResponses, BuyTestnetCoinsData, BuyTestnetCoinsErrors, BuyTestnetCoinsResponses, CancelInvoicesInvoiceData, CancelInvoicesInvoiceErrors, CancelInvoicesInvoiceResponses, CheckExistsMintlessJettonData, CheckExistsMintlessJettonErrors, CheckExistsMintlessJettonResponses, CreateInvoicesAppData, CreateInvoicesAppErrors, CreateInvoicesAppResponses, CreateInvoicesAppWebhookData, CreateInvoicesAppWebhookErrors, CreateInvoicesAppWebhookResponses, CreateInvoicesInvoiceData, CreateInvoicesInvoiceErrors, CreateInvoicesInvoiceResponses, CreateJettonAirdropData, CreateJettonAirdropErrors, CreateJettonAirdropResponses, CreateLiteproxyKeysData, CreateLiteproxyKeysErrors, CreateLiteproxyKeysResponses, CreateProjectData, CreateProjectErrors, CreateProjectMessagesAppData, CreateProjectMessagesAppErrors, CreateProjectMessagesAppResponses, CreateProjectResponses, CreateProServiceInvoiceData, CreateProServiceInvoiceErrors, CreateProServiceInvoiceResponses, CreateStatsDashboardData, CreateStatsDashboardErrors, CreateStatsDashboardResponses, CreateTonSiteData, CreateTonSiteErrors, CreateTonSiteResponses, DeleteInvoicesAppData, DeleteInvoicesAppErrors, DeleteInvoicesAppResponses, DeleteInvoicesAppWebhookData, DeleteInvoicesAppWebhookErrors, DeleteInvoicesAppWebhookResponses, DeleteProjectData, DeleteProjectErrors, DeleteProjectMessagesAppData, DeleteProjectMessagesAppErrors, DeleteProjectMessagesAppResponses, DeleteProjectParticipantData, DeleteProjectParticipantErrors, DeleteProjectParticipantResponses, DeleteProjectResponses, DeleteProjectTonApiTokenData, DeleteProjectTonApiTokenErrors, DeleteProjectTonApiTokenResponses, DeleteTonSiteData, DeleteTonSiteErrors, DeleteTonSiteResponses, EstimateStatsQueryData, EstimateStatsQueryErrors, EstimateStatsQueryResponses, ExportInvoicesCsvData, ExportInvoicesCsvErrors, ExportInvoicesCsvResponses, FeedbackData, FeedbackErrors, FeedbackResponses, GenerateProjectTonApiTokenData, GenerateProjectTonApiTokenErrors, GenerateProjectTonApiTokenResponses, GetCNftConfigData, GetCNftConfigErrors, GetCNftConfigResponses, GetDepositAddressData, GetDepositAddressErrors, GetDepositAddressResponses, GetGraphFromStatsData, GetGraphFromStatsErrors, GetGraphFromStatsResponses, GetInfoCNftCollectionAccountData, GetInfoCNftCollectionAccountErrors, GetInfoCNftCollectionAccountResponses, GetInvoicesAppData, GetInvoicesAppErrors, GetInvoicesAppResponses, GetInvoicesAppTokenData, GetInvoicesAppTokenErrors, GetInvoicesAppTokenResponses, GetInvoicesData, GetInvoicesErrors, GetInvoicesInvoiceData, GetInvoicesInvoiceErrors, GetInvoicesInvoiceResponses, GetInvoicesResponses, GetInvoicesStatsData, GetInvoicesStatsErrors, GetInvoicesStatsResponses, GetJettonAirdropsData, GetJettonAirdropsErrors, GetJettonAirdropsResponses, GetJettonsByOwnerData, GetJettonsByOwnerErrors, GetJettonsByOwnerResponses, GetLiteproxyKeysData, GetLiteproxyKeysErrors, GetLiteproxyKeysResponses, GetLiteproxyTiersData, GetLiteproxyTiersErrors, GetLiteproxyTiersResponses, GetMessagesPackagesData, GetMessagesPackagesErrors, GetMessagesPackagesResponses, GetMintlessJettonConfigData, GetMintlessJettonConfigErrors, GetMintlessJettonConfigResponses, GetPaidCNftCollectionsData, GetPaidCNftCollectionsErrors, GetPaidCNftCollectionsResponses, GetPaidMintlessJettonsData, GetPaidMintlessJettonsErrors, GetPaidMintlessJettonsResponses, GetProjectBillingHistoryData, GetProjectBillingHistoryErrors, GetProjectBillingHistoryResponses, GetProjectLiteproxyTierData, GetProjectLiteproxyTierErrors, GetProjectLiteproxyTierResponses, GetProjectMessagesAppsData, GetProjectMessagesAppsErrors, GetProjectMessagesAppsResponses, GetProjectMessagesAppTokenData, GetProjectMessagesAppTokenErrors, GetProjectMessagesAppTokenResponses, GetProjectMessagesBalanceData, GetProjectMessagesBalanceErrors, GetProjectMessagesBalanceResponses, GetProjectMessagesStatsData, GetProjectMessagesStatsErrors, GetProjectMessagesStatsResponses, GetProjectParticipantsData, GetProjectParticipantsErrors, GetProjectParticipantsResponses, GetProjectsData, GetProjectsErrors, GetProjectsResponses, GetProjectTonApiStatsData, GetProjectTonApiStatsErrors, GetProjectTonApiStatsResponses, GetProjectTonApiTierData, GetProjectTonApiTierErrors, GetProjectTonApiTierResponses, GetProjectTonApiTokensData, GetProjectTonApiTokensErrors, GetProjectTonApiTokensResponses, GetProServiceInvoiceData, GetProServiceInvoiceErrors, GetProServiceInvoiceResponses, GetProServiceTiersData, GetProServiceTiersErrors, GetProServiceTiersResponses, GetSqlHistoryFromStatsData, GetSqlHistoryFromStatsErrors, GetSqlHistoryFromStatsResponses, GetSqlResultFromStatsData, GetSqlResultFromStatsErrors, GetSqlResultFromStatsResponses, GetStatsChatGptPriceData, GetStatsChatGptPriceErrors, GetStatsChatGptPriceResponses, GetStatsDashboardData, GetStatsDashboardErrors, GetStatsDashboardResponses, GetStatsDashboardsData, GetStatsDashboardsErrors, GetStatsDashboardsResponses, GetStatsDdlData, GetStatsDdlErrors, GetStatsDdlResponses, GetTestnetAvailableData, GetTestnetAvailableErrors, GetTestnetAvailableResponses, GetTonApiTiersData, GetTonApiTiersErrors, GetTonApiTiersResponses, GetTonSitesData, GetTonSitesErrors, GetTonSitesResponses, GetUserInfoData, GetUserInfoErrors, GetUserInfoResponses, GetUserReferralsData, GetUserReferralsErrors, GetUserReferralsResponses, IndexingCNftCollectionData, IndexingCNftCollectionErrors, IndexingCNftCollectionResponses, PingAliveGetData, PingAliveGetErrors, PingAliveGetResponses, PingAliveHeadData, PingAliveHeadErrors, PingAliveHeadResponses, PingReadyGetData, PingReadyGetErrors, PingReadyGetResponses, PingReadyHeadData, PingReadyHeadErrors, PingReadyHeadResponses, ProjectPaymentsHistoryData, ProjectPaymentsHistoryErrors, ProjectPaymentsHistoryResponses, PromoCodeDepositProjectData, PromoCodeDepositProjectErrors, PromoCodeDepositProjectResponses, ProServiceAuthGeneratePayloadData, ProServiceAuthGeneratePayloadErrors, ProServiceAuthGeneratePayloadResponses, ProServiceDashboardColumnsData, ProServiceDashboardColumnsErrors, ProServiceDashboardColumnsResponses, ProServiceDashboardDataData, ProServiceDashboardDataErrors, ProServiceDashboardDataResponses, ProServiceDeleteStateData, ProServiceDeleteStateErrors, ProServiceDeleteStateResponses, ProServiceGetStateData, ProServiceGetStateErrors, ProServiceGetStateResponses, ProServiceGetUserInfoData, ProServiceGetUserInfoErrors, ProServiceGetUserInfoResponses, ProServiceInvoiceWebhookData, ProServiceInvoiceWebhookErrors, ProServiceInvoiceWebhookResponses, ProServiceLogoutData, ProServiceLogoutErrors, ProServiceLogoutResponses, ProServiceMobileData, ProServiceMobileErrors, ProServiceMobileResponses, ProServiceTonConnectAuthData, ProServiceTonConnectAuthErrors, ProServiceTonConnectAuthResponses, ProServiceTrialData, ProServiceTrialErrors, ProServiceTrialResponses, ProServiceUpdateStateData, ProServiceUpdateStateErrors, ProServiceUpdateStateResponses, ProServiceVerifyData, ProServiceVerifyErrors, ProServiceVerifyResponses, RegenerateInvoicesAppTokenData, RegenerateInvoicesAppTokenErrors, RegenerateInvoicesAppTokenResponses, RegenerateProjectMessagesAppTokenData, RegenerateProjectMessagesAppTokenErrors, RegenerateProjectMessagesAppTokenResponses, SendProjectMessagesPushData, SendProjectMessagesPushErrors, SendProjectMessagesPushResponses, SendQueryToStatsData, SendQueryToStatsErrors, SendQueryToStatsResponses, StatsChatGptRequestData, StatsChatGptRequestErrors, StatsChatGptRequestResponses, TestDeleteUserData, TestDeleteUserErrors, TestDeleteUserResponses, UpdateInvoicesAppData, UpdateInvoicesAppErrors, UpdateInvoicesAppResponses, UpdateInvoicesAppWebhookData, UpdateInvoicesAppWebhookErrors, UpdateInvoicesAppWebhookResponses, UpdateInvoicesInvoiceData, UpdateInvoicesInvoiceErrors, UpdateInvoicesInvoiceResponses, UpdateLiteproxyTierData, UpdateLiteproxyTierErrors, UpdateLiteproxyTierResponses, UpdateProjectData, UpdateProjectErrors, UpdateProjectResponses, UpdateProjectTonApiTierData, UpdateProjectTonApiTierErrors, UpdateProjectTonApiTierResponses, UpdateProjectTonApiTokenData, UpdateProjectTonApiTokenErrors, UpdateProjectTonApiTokenResponses, UpdateStatsDashboardData, UpdateStatsDashboardErrors, UpdateStatsDashboardResponses, UpdateStatsQueryData, UpdateStatsQueryErrors, UpdateStatsQueryResponses, UpdateTonSitesEndpointsData, UpdateTonSitesEndpointsErrors, UpdateTonSitesEndpointsResponses, UploadMinterJettonMediaData, UploadMinterJettonMediaErrors, UploadMinterJettonMediaResponses, UploadMinterJettonMetaData, UploadMinterJettonMetaErrors, UploadMinterJettonMetaResponses, ValidChangeLiteproxyTierData, ValidChangeLiteproxyTierErrors, ValidChangeLiteproxyTierResponses, ValidChangeTonApiTierData, ValidChangeTonApiTierErrors, ValidChangeTonApiTierResponses, VerifyProjectMessagesAppData, VerifyProjectMessagesAppErrors, VerifyProjectMessagesAppResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const pingReadyGet = <ThrowOnError extends boolean = false>(options?: Options<PingReadyGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<PingReadyGetResponses, PingReadyGetErrors, ThrowOnError>({
        url: '/ready',
        ...options
    });
};

export const pingReadyHead = <ThrowOnError extends boolean = false>(options?: Options<PingReadyHeadData, ThrowOnError>) => {
    return (options?.client ?? client).head<PingReadyHeadResponses, PingReadyHeadErrors, ThrowOnError>({
        url: '/ready',
        ...options
    });
};

export const pingAliveGet = <ThrowOnError extends boolean = false>(options?: Options<PingAliveGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<PingAliveGetResponses, PingAliveGetErrors, ThrowOnError>({
        url: '/alive',
        ...options
    });
};

export const pingAliveHead = <ThrowOnError extends boolean = false>(options?: Options<PingAliveHeadData, ThrowOnError>) => {
    return (options?.client ?? client).head<PingAliveHeadResponses, PingAliveHeadErrors, ThrowOnError>({
        url: '/alive',
        ...options
    });
};

/**
 * Send user feedback
 */
export const feedback = <ThrowOnError extends boolean = false>(options?: Options<FeedbackData, ThrowOnError>) => {
    return (options?.client ?? client).post<FeedbackResponses, FeedbackErrors, ThrowOnError>({
        url: '/api/v1/feedback',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete test user
 */
export const testDeleteUser = <ThrowOnError extends boolean = false>(options?: Options<TestDeleteUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<TestDeleteUserResponses, TestDeleteUserErrors, ThrowOnError>({
        url: '/api/v1/test/user',
        ...options
    });
};

/**
 * Private method: Get project balance
 */
export const adminGetProjectBalance = <ThrowOnError extends boolean = false>(options: Options<AdminGetProjectBalanceData, ThrowOnError>) => {
    return (options.client ?? client).get<AdminGetProjectBalanceResponses, AdminGetProjectBalanceErrors, ThrowOnError>({
        url: '/api/v1/admin/project/{id}/balance',
        ...options
    });
};

/**
 * Private method: Charge project
 *
 * Private method
 */
export const adminChargeProject = <ThrowOnError extends boolean = false>(options: Options<AdminChargeProjectData, ThrowOnError>) => {
    return (options.client ?? client).post<AdminChargeProjectResponses, AdminChargeProjectErrors, ThrowOnError>({
        url: '/api/v1/admin/project/{id}/charge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Private method: Messages charge project
 *
 * Private method
 */
export const adminMessagesChargeProject = <ThrowOnError extends boolean = false>(options?: Options<AdminMessagesChargeProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<AdminMessagesChargeProjectResponses, AdminMessagesChargeProjectErrors, ThrowOnError>({
        url: '/api/v1/admin/messages/charge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Private method: Get sites
 *
 * Private method
 */
export const adminGetTonSites = <ThrowOnError extends boolean = false>(options?: Options<AdminGetTonSitesData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminGetTonSitesResponses, AdminGetTonSitesErrors, ThrowOnError>({
        url: '/api/v1/admin/sites',
        ...options
    });
};

/**
 * Auth via telegram
 *
 * The token is recorded in the database and in the user's cookies.  If the user logs in under different browsers, then each authorization will have its own token.
 *
 */
export const authViaTg = <ThrowOnError extends boolean = false>(options?: Options<AuthViaTgData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthViaTgResponses, AuthViaTgErrors, ThrowOnError>({
        url: '/api/v1/auth/tg',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate payload for TON Connect
 */
export const authGeneratePayload = <ThrowOnError extends boolean = false>(options?: Options<AuthGeneratePayloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthGeneratePayloadResponses, AuthGeneratePayloadErrors, ThrowOnError>({
        url: '/api/v1/auth/proof/payload',
        ...options
    });
};

/**
 * Auth via TON Connect
 *
 * The token is recorded in the database and in the user's cookies.  If the user logs in under different browsers, then each authorization will have its own token.
 *
 */
export const authViaTonConnect = <ThrowOnError extends boolean = false>(options?: Options<AuthViaTonConnectData, ThrowOnError>) => {
    return (options?.client ?? client).post<AuthViaTonConnectResponses, AuthViaTonConnectErrors, ThrowOnError>({
        url: '/api/v1/auth/proof/check',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get user info
 */
export const getUserInfo = <ThrowOnError extends boolean = false>(options?: Options<GetUserInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserInfoResponses, GetUserInfoErrors, ThrowOnError>({
        url: '/api/v1/me',
        ...options
    });
};

/**
 * Get user referrals
 */
export const getUserReferrals = <ThrowOnError extends boolean = false>(options?: Options<GetUserReferralsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserReferralsResponses, GetUserReferralsErrors, ThrowOnError>({
        url: '/api/v1/user/referrals',
        ...options
    });
};

/**
 * Logout from the system
 *
 * After logout, the user's token is deleted
 */
export const accountLogout = <ThrowOnError extends boolean = false>(options?: Options<AccountLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<AccountLogoutResponses, AccountLogoutErrors, ThrowOnError>({
        url: '/api/v1/account/logout',
        ...options
    });
};

/**
 * Create project
 */
export const createProject = <ThrowOnError extends boolean = false>(options?: Options<CreateProjectData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateProjectResponses, CreateProjectErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/project',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get user's project
 */
export const getProjects = <ThrowOnError extends boolean = false>(options?: Options<GetProjectsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProjectsResponses, GetProjectsErrors, ThrowOnError>({
        url: '/api/v1/projects',
        ...options
    });
};

/**
 * Delete user project
 */
export const deleteProject = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectResponses, DeleteProjectErrors, ThrowOnError>({
        url: '/api/v1/project/{id}',
        ...options
    });
};

/**
 * Update user project
 *
 * You need to pass only those fields that need to be changed.
 */
export const updateProject = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateProjectResponses, UpdateProjectErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/project/{id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get project deposit address
 */
export const getDepositAddress = <ThrowOnError extends boolean = false>(options: Options<GetDepositAddressData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDepositAddressResponses, GetDepositAddressErrors, ThrowOnError>({
        url: '/api/v1/project/{id}/deposit/address',
        ...options
    });
};

/**
 * Get project billing history
 */
export const getProjectBillingHistory = <ThrowOnError extends boolean = false>(options: Options<GetProjectBillingHistoryData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectBillingHistoryResponses, GetProjectBillingHistoryErrors, ThrowOnError>({
        url: '/api/v1/project/{id}/billing/history',
        ...options
    });
};

/**
 * Crediting funds with a promo code
 */
export const promoCodeDepositProject = <ThrowOnError extends boolean = false>(options: Options<PromoCodeDepositProjectData, ThrowOnError>) => {
    return (options.client ?? client).post<PromoCodeDepositProjectResponses, PromoCodeDepositProjectErrors, ThrowOnError>({
        url: '/api/v1/project/{id}/promocode/{promo_code}',
        ...options
    });
};

/**
 * Get project payments history
 *
 * @deprecated
 */
export const projectPaymentsHistory = <ThrowOnError extends boolean = false>(options: Options<ProjectPaymentsHistoryData, ThrowOnError>) => {
    return (options.client ?? client).get<ProjectPaymentsHistoryResponses, ProjectPaymentsHistoryErrors, ThrowOnError>({
        url: '/api/v1/project/{id}/payments/history',
        ...options
    });
};

/**
 * Get project participants
 */
export const getProjectParticipants = <ThrowOnError extends boolean = false>(options: Options<GetProjectParticipantsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectParticipantsResponses, GetProjectParticipantsErrors, ThrowOnError>({
        url: '/api/v1/project/{id}/participants',
        ...options
    });
};

/**
 * Add a participant to the project
 */
export const addProjectParticipant = <ThrowOnError extends boolean = false>(options: Options<AddProjectParticipantData, ThrowOnError>) => {
    return (options.client ?? client).post<AddProjectParticipantResponses, AddProjectParticipantErrors, ThrowOnError>({
        url: '/api/v1/project/{id}/participants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a participant from the project
 */
export const deleteProjectParticipant = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectParticipantData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectParticipantResponses, DeleteProjectParticipantErrors, ThrowOnError>({
        url: '/api/v1/project/{id}/participant/{user_id}',
        ...options
    });
};

/**
 * Get project TonAPI tokens
 */
export const getProjectTonApiTokens = <ThrowOnError extends boolean = false>(options: Options<GetProjectTonApiTokensData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectTonApiTokensResponses, GetProjectTonApiTokensErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/tokens',
        ...options
    });
};

/**
 * Generate project TonAPI token
 */
export const generateProjectTonApiToken = <ThrowOnError extends boolean = false>(options: Options<GenerateProjectTonApiTokenData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateProjectTonApiTokenResponses, GenerateProjectTonApiTokenErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/generate/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete project TonAPI token
 */
export const deleteProjectTonApiToken = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectTonApiTokenData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectTonApiTokenResponses, DeleteProjectTonApiTokenErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/token/{id}',
        ...options
    });
};

/**
 * Update project TonAPI token
 */
export const updateProjectTonApiToken = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectTonApiTokenData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateProjectTonApiTokenResponses, UpdateProjectTonApiTokenErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/token/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get project TonAPI tier
 */
export const getProjectTonApiTier = <ThrowOnError extends boolean = false>(options: Options<GetProjectTonApiTierData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectTonApiTierResponses, GetProjectTonApiTierErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/tier',
        ...options
    });
};

/**
 * Update project TonAPI tier
 */
export const updateProjectTonApiTier = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectTonApiTierData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateProjectTonApiTierResponses, UpdateProjectTonApiTierErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/tier',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Valid change TonAPI tier for project
 */
export const validChangeTonApiTier = <ThrowOnError extends boolean = false>(options: Options<ValidChangeTonApiTierData, ThrowOnError>) => {
    return (options.client ?? client).get<ValidChangeTonApiTierResponses, ValidChangeTonApiTierErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/tier/valid/buy/{id}',
        ...options
    });
};

/**
 * Get active TonAPI tiers
 */
export const getTonApiTiers = <ThrowOnError extends boolean = false>(options?: Options<GetTonApiTiersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTonApiTiersResponses, GetTonApiTiersErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/tiers',
        ...options
    });
};

/**
 * Get project TonAPI stats
 *
 * To filter the stats, are expected start and end query parameters in unix format, where end is the day closer to the current one, for example start=1675958400&end=1676908800,
 */
export const getProjectTonApiStats = <ThrowOnError extends boolean = false>(options: Options<GetProjectTonApiStatsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectTonApiStatsResponses, GetProjectTonApiStatsErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/stats',
        ...options
    });
};

/**
 * Get private keys for the liteproxy server
 */
export const adminGetLiteproxyPrivateKeys = <ThrowOnError extends boolean = false>(options: Options<AdminGetLiteproxyPrivateKeysData, ThrowOnError>) => {
    return (options.client ?? client).get<AdminGetLiteproxyPrivateKeysResponses, AdminGetLiteproxyPrivateKeysErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/liteproxy/private_keys',
        ...options
    });
};

/**
 * Get keys for connecting to liteproxy servers
 */
export const getLiteproxyKeys = <ThrowOnError extends boolean = false>(options: Options<GetLiteproxyKeysData, ThrowOnError>) => {
    return (options.client ?? client).get<GetLiteproxyKeysResponses, GetLiteproxyKeysErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/liteproxy/keys',
        ...options
    });
};

/**
 * Create liteproxy keys
 */
export const createLiteproxyKeys = <ThrowOnError extends boolean = false>(options: Options<CreateLiteproxyKeysData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateLiteproxyKeysResponses, CreateLiteproxyKeysErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/liteproxy/keys',
        ...options
    });
};

/**
 * Get list of active tiers for the liteproxy server
 */
export const getLiteproxyTiers = <ThrowOnError extends boolean = false>(options?: Options<GetLiteproxyTiersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLiteproxyTiersResponses, GetLiteproxyTiersErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/liteproxy/tiers',
        ...options
    });
};

/**
 * Get the current tier for liteproxy server
 */
export const getProjectLiteproxyTier = <ThrowOnError extends boolean = false>(options: Options<GetProjectLiteproxyTierData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectLiteproxyTierResponses, GetProjectLiteproxyTierErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/liteproxy/tier',
        ...options
    });
};

/**
 * Switch to a new tier for liteproxy server
 */
export const updateLiteproxyTier = <ThrowOnError extends boolean = false>(options: Options<UpdateLiteproxyTierData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateLiteproxyTierResponses, UpdateLiteproxyTierErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/liteproxy/tier',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Valid change Liteserver tier for project
 */
export const validChangeLiteproxyTier = <ThrowOnError extends boolean = false>(options: Options<ValidChangeLiteproxyTierData, ThrowOnError>) => {
    return (options.client ?? client).get<ValidChangeLiteproxyTierResponses, ValidChangeLiteproxyTierErrors, ThrowOnError>({
        url: '/api/v1/services/tonapi/liteproxy/tier/valid/buy/{id}',
        ...options
    });
};

/**
 * Get messages packages
 */
export const getMessagesPackages = <ThrowOnError extends boolean = false>(options?: Options<GetMessagesPackagesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMessagesPackagesResponses, GetMessagesPackagesErrors, ThrowOnError>({
        url: '/api/v1/services/messages/packages',
        ...options
    });
};

/**
 * Buy messages package
 */
export const buyMessagesPackage = <ThrowOnError extends boolean = false>(options: Options<BuyMessagesPackageData, ThrowOnError>) => {
    return (options.client ?? client).post<BuyMessagesPackageResponses, BuyMessagesPackageErrors, ThrowOnError>({
        url: '/api/v1/services/messages/package',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete project messages app
 */
export const deleteProjectMessagesApp = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectMessagesAppData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectMessagesAppResponses, DeleteProjectMessagesAppErrors, ThrowOnError>({
        url: '/api/v1/services/messages/app',
        ...options
    });
};

/**
 * Create project messages app
 */
export const createProjectMessagesApp = <ThrowOnError extends boolean = false>(options: Options<CreateProjectMessagesAppData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateProjectMessagesAppResponses, CreateProjectMessagesAppErrors, ThrowOnError>({
        url: '/api/v1/services/messages/app',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify project messages app
 */
export const verifyProjectMessagesApp = <ThrowOnError extends boolean = false>(options: Options<VerifyProjectMessagesAppData, ThrowOnError>) => {
    return (options.client ?? client).post<VerifyProjectMessagesAppResponses, VerifyProjectMessagesAppErrors, ThrowOnError>({
        url: '/api/v1/services/messages/app/verify',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get project messages apps
 */
export const getProjectMessagesApps = <ThrowOnError extends boolean = false>(options: Options<GetProjectMessagesAppsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectMessagesAppsResponses, GetProjectMessagesAppsErrors, ThrowOnError>({
        url: '/api/v1/services/messages/apps',
        ...options
    });
};

/**
 * Get project messages balance
 */
export const getProjectMessagesBalance = <ThrowOnError extends boolean = false>(options: Options<GetProjectMessagesBalanceData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectMessagesBalanceResponses, GetProjectMessagesBalanceErrors, ThrowOnError>({
        url: '/api/v1/services/messages/balance',
        ...options
    });
};

/**
 * Get project messages app token
 */
export const getProjectMessagesAppToken = <ThrowOnError extends boolean = false>(options: Options<GetProjectMessagesAppTokenData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectMessagesAppTokenResponses, GetProjectMessagesAppTokenErrors, ThrowOnError>({
        url: '/api/v1/services/messages/token',
        ...options
    });
};

/**
 * Regenerate project messages app token
 */
export const regenerateProjectMessagesAppToken = <ThrowOnError extends boolean = false>(options: Options<RegenerateProjectMessagesAppTokenData, ThrowOnError>) => {
    return (options.client ?? client).patch<RegenerateProjectMessagesAppTokenResponses, RegenerateProjectMessagesAppTokenErrors, ThrowOnError>({
        url: '/api/v1/services/messages/token',
        ...options
    });
};

/**
 * Get project messages stats
 */
export const getProjectMessagesStats = <ThrowOnError extends boolean = false>(options: Options<GetProjectMessagesStatsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectMessagesStatsResponses, GetProjectMessagesStatsErrors, ThrowOnError>({
        url: '/api/v1/services/messages/stats',
        ...options
    });
};

/**
 * Send project messages push
 */
export const sendProjectMessagesPush = <ThrowOnError extends boolean = false>(options?: Options<SendProjectMessagesPushData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendProjectMessagesPushResponses, SendProjectMessagesPushErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/services/messages/push',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check available coins
 */
export const getTestnetAvailable = <ThrowOnError extends boolean = false>(options?: Options<GetTestnetAvailableData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTestnetAvailableResponses, GetTestnetAvailableErrors, ThrowOnError>({
        url: '/api/v1/services/testnet/available',
        ...options
    });
};

/**
 * Buy testnet coins
 */
export const buyTestnetCoins = <ThrowOnError extends boolean = false>(options: Options<BuyTestnetCoinsData, ThrowOnError>) => {
    return (options.client ?? client).post<BuyTestnetCoinsResponses, BuyTestnetCoinsErrors, ThrowOnError>({
        url: '/api/v1/services/testnet/buy/coins',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get stats db ddl
 */
export const getStatsDdl = <ThrowOnError extends boolean = false>(options?: Options<GetStatsDdlData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStatsDdlResponses, GetStatsDdlErrors, ThrowOnError>({
        url: '/api/v1/services/stats/ddl',
        ...options
    });
};

/**
 * Estimate query
 */
export const estimateStatsQuery = <ThrowOnError extends boolean = false>(options?: Options<EstimateStatsQueryData, ThrowOnError>) => {
    return (options?.client ?? client).post<EstimateStatsQueryResponses, EstimateStatsQueryErrors, ThrowOnError>({
        url: '/api/v1/services/stats/query/estimate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send query to stats service
 */
export const sendQueryToStats = <ThrowOnError extends boolean = false>(options?: Options<SendQueryToStatsData, ThrowOnError>) => {
    return (options?.client ?? client).post<SendQueryToStatsResponses, SendQueryToStatsErrors, ThrowOnError>({
        url: '/api/v1/services/stats/query',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get result by sql query id
 */
export const getSqlResultFromStats = <ThrowOnError extends boolean = false>(options: Options<GetSqlResultFromStatsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSqlResultFromStatsResponses, GetSqlResultFromStatsErrors, ThrowOnError>({
        url: '/api/v1/services/stats/query/{id}',
        ...options
    });
};

/**
 * Update query
 */
export const updateStatsQuery = <ThrowOnError extends boolean = false>(options: Options<UpdateStatsQueryData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateStatsQueryResponses, UpdateStatsQueryErrors, ThrowOnError>({
        url: '/api/v1/services/stats/query/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get sql history queries
 */
export const getSqlHistoryFromStats = <ThrowOnError extends boolean = false>(options: Options<GetSqlHistoryFromStatsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSqlHistoryFromStatsResponses, GetSqlHistoryFromStatsErrors, ThrowOnError>({
        url: '/api/v1/services/stats/queries/history',
        ...options
    });
};

/**
 * Get an intersection between accounts
 */
export const getGraphFromStats = <ThrowOnError extends boolean = false>(options: Options<GetGraphFromStatsData, ThrowOnError>) => {
    return (options.client ?? client).post<GetGraphFromStatsResponses, GetGraphFromStatsErrors, ThrowOnError>({
        url: '/api/v1/services/stats/cosmos/graph',
        ...options
    });
};

/**
 * Send request to ChatGPT
 */
export const statsChatGptRequest = <ThrowOnError extends boolean = false>(options: Options<StatsChatGptRequestData, ThrowOnError>) => {
    return (options.client ?? client).post<StatsChatGptRequestResponses, StatsChatGptRequestErrors, ThrowOnError>({
        url: '/api/v1/services/stats/gpt',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Price per request for ChatGPT
 */
export const getStatsChatGptPrice = <ThrowOnError extends boolean = false>(options: Options<GetStatsChatGptPriceData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStatsChatGptPriceResponses, GetStatsChatGptPriceErrors, ThrowOnError>({
        url: '/api/v1/services/stats/price/gpt',
        ...options
    });
};

/**
 * Create dashboard
 */
export const createStatsDashboard = <ThrowOnError extends boolean = false>(options: Options<CreateStatsDashboardData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateStatsDashboardResponses, CreateStatsDashboardErrors, ThrowOnError>({
        url: '/api/v1/services/stats/dashboard',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get dashboard
 */
export const getStatsDashboard = <ThrowOnError extends boolean = false>(options: Options<GetStatsDashboardData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStatsDashboardResponses, GetStatsDashboardErrors, ThrowOnError>({
        url: '/api/v1/services/stats/dashboard/{id}',
        ...options
    });
};

/**
 * Update dashboard
 */
export const updateStatsDashboard = <ThrowOnError extends boolean = false>(options: Options<UpdateStatsDashboardData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateStatsDashboardResponses, UpdateStatsDashboardErrors, ThrowOnError>({
        url: '/api/v1/services/stats/dashboard/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get dashboards
 */
export const getStatsDashboards = <ThrowOnError extends boolean = false>(options: Options<GetStatsDashboardsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetStatsDashboardsResponses, GetStatsDashboardsErrors, ThrowOnError>({
        url: '/api/v1/services/stats/dashboards',
        ...options
    });
};

/**
 * Get invoices app by project
 */
export const getInvoicesApp = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesAppData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInvoicesAppResponses, GetInvoicesAppErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/app',
        ...options
    });
};

/**
 * Create invoices app
 */
export const createInvoicesApp = <ThrowOnError extends boolean = false>(options: Options<CreateInvoicesAppData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateInvoicesAppResponses, CreateInvoicesAppErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/app',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete invoices app
 */
export const deleteInvoicesApp = <ThrowOnError extends boolean = false>(options: Options<DeleteInvoicesAppData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteInvoicesAppResponses, DeleteInvoicesAppErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/app/{id}',
        ...options
    });
};

/**
 * Update invoices app
 */
export const updateInvoicesApp = <ThrowOnError extends boolean = false>(options: Options<UpdateInvoicesAppData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateInvoicesAppResponses, UpdateInvoicesAppErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/app/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create webhook for app
 */
export const createInvoicesAppWebhook = <ThrowOnError extends boolean = false>(options: Options<CreateInvoicesAppWebhookData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateInvoicesAppWebhookResponses, CreateInvoicesAppWebhookErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/app/{id}/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete webhook for app
 */
export const deleteInvoicesAppWebhook = <ThrowOnError extends boolean = false>(options: Options<DeleteInvoicesAppWebhookData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteInvoicesAppWebhookResponses, DeleteInvoicesAppWebhookErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/app/{id}/webhook/{webhook_id}',
        ...options
    });
};

/**
 * Update webhook for app
 */
export const updateInvoicesAppWebhook = <ThrowOnError extends boolean = false>(options: Options<UpdateInvoicesAppWebhookData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateInvoicesAppWebhookResponses, UpdateInvoicesAppWebhookErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/app/{id}/webhook/{webhook_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get invoices app token
 */
export const getInvoicesAppToken = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesAppTokenData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInvoicesAppTokenResponses, GetInvoicesAppTokenErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/token',
        ...options
    });
};

/**
 * Regenerate invoices app token
 */
export const regenerateInvoicesAppToken = <ThrowOnError extends boolean = false>(options: Options<RegenerateInvoicesAppTokenData, ThrowOnError>) => {
    return (options.client ?? client).patch<RegenerateInvoicesAppTokenResponses, RegenerateInvoicesAppTokenErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/token',
        ...options
    });
};

/**
 * Create invoice
 */
export const createInvoicesInvoice = <ThrowOnError extends boolean = false>(options?: Options<CreateInvoicesInvoiceData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateInvoicesInvoiceResponses, CreateInvoicesInvoiceErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/invoice',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get invoices
 */
export const getInvoices = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInvoicesResponses, GetInvoicesErrors, ThrowOnError>({
        url: '/api/v1/services/invoices',
        ...options
    });
};

/**
 * Get invoice
 */
export const getInvoicesInvoice = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesInvoiceData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInvoicesInvoiceResponses, GetInvoicesInvoiceErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/{id}',
        ...options
    });
};

/**
 * Update invoice
 */
export const updateInvoicesInvoice = <ThrowOnError extends boolean = false>(options: Options<UpdateInvoicesInvoiceData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateInvoicesInvoiceResponses, UpdateInvoicesInvoiceErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Cancel invoice
 */
export const cancelInvoicesInvoice = <ThrowOnError extends boolean = false>(options: Options<CancelInvoicesInvoiceData, ThrowOnError>) => {
    return (options.client ?? client).patch<CancelInvoicesInvoiceResponses, CancelInvoicesInvoiceErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/{id}/cancel',
        ...options
    });
};

/**
 * Get invoices stats
 */
export const getInvoicesStats = <ThrowOnError extends boolean = false>(options: Options<GetInvoicesStatsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInvoicesStatsResponses, GetInvoicesStatsErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/stats',
        ...options
    });
};

/**
 * Export invoices to csv file
 */
export const exportInvoicesCsv = <ThrowOnError extends boolean = false>(options: Options<ExportInvoicesCsvData, ThrowOnError>) => {
    return (options.client ?? client).get<ExportInvoicesCsvResponses, ExportInvoicesCsvErrors, ThrowOnError>({
        url: '/api/v1/services/invoices/export',
        ...options
    });
};

/**
 * Generating payload for TonConnect
 */
export const proServiceAuthGeneratePayload = <ThrowOnError extends boolean = false>(options?: Options<ProServiceAuthGeneratePayloadData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProServiceAuthGeneratePayloadResponses, ProServiceAuthGeneratePayloadErrors, ThrowOnError>({
        url: '/api/v1/services/pro/auth/proof/payload',
        ...options
    });
};

/**
 * Auth via TonConnect
 */
export const proServiceTonConnectAuth = <ThrowOnError extends boolean = false>(options?: Options<ProServiceTonConnectAuthData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProServiceTonConnectAuthResponses, ProServiceTonConnectAuthErrors, ThrowOnError>({
        url: '/api/v1/services/pro/auth/proof/check',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout from the system
 */
export const proServiceLogout = <ThrowOnError extends boolean = false>(options?: Options<ProServiceLogoutData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProServiceLogoutResponses, ProServiceLogoutErrors, ThrowOnError>({
        url: '/api/v1/services/pro/logout',
        ...options
    });
};

/**
 * Get user info
 */
export const proServiceGetUserInfo = <ThrowOnError extends boolean = false>(options?: Options<ProServiceGetUserInfoData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProServiceGetUserInfoResponses, ProServiceGetUserInfoErrors, ThrowOnError>({
        url: '/api/v1/services/pro/user/info',
        ...options
    });
};

/**
 * Get active tiers
 */
export const getProServiceTiers = <ThrowOnError extends boolean = false>(options?: Options<GetProServiceTiersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProServiceTiersResponses, GetProServiceTiersErrors, ThrowOnError>({
        url: '/api/v1/services/pro/tiers',
        ...options
    });
};

/**
 * Creating an invoice for Pro tier payment
 */
export const createProServiceInvoice = <ThrowOnError extends boolean = false>(options?: Options<CreateProServiceInvoiceData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateProServiceInvoiceResponses, CreateProServiceInvoiceErrors, ThrowOnError>({
        url: '/api/v1/services/pro/invoice',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get info about the invoice
 */
export const getProServiceInvoice = <ThrowOnError extends boolean = false>(options: Options<GetProServiceInvoiceData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProServiceInvoiceResponses, GetProServiceInvoiceErrors, ThrowOnError>({
        url: '/api/v1/services/pro/invoice/{id}',
        ...options
    });
};

/**
 * The invoice webhook
 */
export const proServiceInvoiceWebhook = <ThrowOnError extends boolean = false>(options?: Options<ProServiceInvoiceWebhookData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProServiceInvoiceWebhookResponses, ProServiceInvoiceWebhookErrors, ThrowOnError>({
        url: '/api/v1/services/pro/invoice/webhook',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify Pro tier subscription
 */
export const proServiceVerify = <ThrowOnError extends boolean = false>(options?: Options<ProServiceVerifyData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProServiceVerifyResponses, ProServiceVerifyErrors, ThrowOnError>({
        url: '/api/v1/services/pro/verify',
        ...options
    });
};

/**
 * Activate pro trial period
 */
export const proServiceTrial = <ThrowOnError extends boolean = false>(options?: Options<ProServiceTrialData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProServiceTrialResponses, ProServiceTrialErrors, ThrowOnError>({
        url: '/api/v1/services/pro/trial',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get dashboard columns
 */
export const proServiceDashboardColumns = <ThrowOnError extends boolean = false>(options?: Options<ProServiceDashboardColumnsData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProServiceDashboardColumnsResponses, ProServiceDashboardColumnsErrors, ThrowOnError>({
        url: '/api/v1/services/pro/dashboard/columns',
        ...options
    });
};

/**
 * Get dashboard data
 */
export const proServiceDashboardData = <ThrowOnError extends boolean = false>(options?: Options<ProServiceDashboardDataData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProServiceDashboardDataResponses, ProServiceDashboardDataErrors, ThrowOnError>({
        url: '/api/v1/services/pro/dashboard/data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete the state
 */
export const proServiceDeleteState = <ThrowOnError extends boolean = false>(options?: Options<ProServiceDeleteStateData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ProServiceDeleteStateResponses, ProServiceDeleteStateErrors, ThrowOnError>({
        url: '/api/v1/services/pro/state',
        ...options
    });
};

/**
 * Get the state
 */
export const proServiceGetState = <ThrowOnError extends boolean = false>(options?: Options<ProServiceGetStateData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProServiceGetStateResponses, ProServiceGetStateErrors, ThrowOnError>({
        url: '/api/v1/services/pro/state',
        ...options
    });
};

/**
 * Update the state
 */
export const proServiceUpdateState = <ThrowOnError extends boolean = false>(options?: Options<ProServiceUpdateStateData, ThrowOnError>) => {
    return (options?.client ?? client).patch<ProServiceUpdateStateResponses, ProServiceUpdateStateErrors, ThrowOnError>({
        url: '/api/v1/services/pro/state',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Activate Pro tier for mobile
 */
export const proServiceMobile = <ThrowOnError extends boolean = false>(options?: Options<ProServiceMobileData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProServiceMobileResponses, ProServiceMobileErrors, ThrowOnError>({
        url: '/api/v1/services/pro/mobile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get cNFT config
 */
export const getCNftConfig = <ThrowOnError extends boolean = false>(options?: Options<GetCNftConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCNftConfigResponses, GetCNftConfigErrors, ThrowOnError>({
        url: '/api/v1/services/cnft/config',
        ...options
    });
};

/**
 * Get info about cNFT collection account
 */
export const getInfoCNftCollectionAccount = <ThrowOnError extends boolean = false>(options: Options<GetInfoCNftCollectionAccountData, ThrowOnError>) => {
    return (options.client ?? client).get<GetInfoCNftCollectionAccountResponses, GetInfoCNftCollectionAccountErrors, ThrowOnError>({
        url: '/api/v1/services/cnft/collection/{account}',
        ...options
    });
};

/**
 * Indexing cNFTs
 */
export const indexingCNftCollection = <ThrowOnError extends boolean = false>(options: Options<IndexingCNftCollectionData, ThrowOnError>) => {
    return (options.client ?? client).post<IndexingCNftCollectionResponses, IndexingCNftCollectionErrors, ThrowOnError>({
        url: '/api/v1/services/cnft/indexing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get paid cNFT collections
 */
export const getPaidCNftCollections = <ThrowOnError extends boolean = false>(options: Options<GetPaidCNftCollectionsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPaidCNftCollectionsResponses, GetPaidCNftCollectionsErrors, ThrowOnError>({
        url: '/api/v1/services/cnft/paid',
        ...options
    });
};

/**
 * Get mintless jetton config
 */
export const getMintlessJettonConfig = <ThrowOnError extends boolean = false>(options?: Options<GetMintlessJettonConfigData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMintlessJettonConfigResponses, GetMintlessJettonConfigErrors, ThrowOnError>({
        url: '/api/v1/services/mintless/config',
        ...options
    });
};

/**
 * Get paid mintless jettons
 */
export const getPaidMintlessJettons = <ThrowOnError extends boolean = false>(options: Options<GetPaidMintlessJettonsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetPaidMintlessJettonsResponses, GetPaidMintlessJettonsErrors, ThrowOnError>({
        url: '/api/v1/services/mintless/paid',
        ...options
    });
};

/**
 * Check if a mintless jetton exists
 */
export const checkExistsMintlessJetton = <ThrowOnError extends boolean = false>(options: Options<CheckExistsMintlessJettonData, ThrowOnError>) => {
    return (options.client ?? client).get<CheckExistsMintlessJettonResponses, CheckExistsMintlessJettonErrors, ThrowOnError>({
        url: '/api/v1/services/mintless/{account}',
        ...options
    });
};

/**
 * Get jettons by owner
 */
export const getJettonsByOwner = <ThrowOnError extends boolean = false>(options: Options<GetJettonsByOwnerData, ThrowOnError>) => {
    return (options.client ?? client).get<GetJettonsByOwnerResponses, GetJettonsByOwnerErrors, ThrowOnError>({
        url: '/api/v1/services/minter/owner/jettons',
        ...options
    });
};

/**
 * Upload jetton media
 */
export const uploadMinterJettonMedia = <ThrowOnError extends boolean = false>(options?: Options<UploadMinterJettonMediaData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadMinterJettonMediaResponses, UploadMinterJettonMediaErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/services/minter/jetton/media',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Upload jetton meta
 */
export const uploadMinterJettonMeta = <ThrowOnError extends boolean = false>(options?: Options<UploadMinterJettonMetaData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadMinterJettonMetaResponses, UploadMinterJettonMetaErrors, ThrowOnError>({
        url: '/api/v1/services/minter/jetton/meta',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all jetton airdrops for a specific project id
 */
export const getJettonAirdrops = <ThrowOnError extends boolean = false>(options: Options<GetJettonAirdropsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetJettonAirdropsResponses, GetJettonAirdropsErrors, ThrowOnError>({
        url: '/api/v1/services/airdrops/jettons',
        ...options
    });
};

/**
 * Create new jetton airdrop
 */
export const createJettonAirdrop = <ThrowOnError extends boolean = false>(options: Options<CreateJettonAirdropData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateJettonAirdropResponses, CreateJettonAirdropErrors, ThrowOnError>({
        url: '/api/v1/services/airdrops/jettons',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Ton Sites
 */
export const getTonSites = <ThrowOnError extends boolean = false>(options: Options<GetTonSitesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTonSitesResponses, GetTonSitesErrors, ThrowOnError>({
        url: '/api/v1/services/sites',
        ...options
    });
};

/**
 * Create a Ton Site
 */
export const createTonSite = <ThrowOnError extends boolean = false>(options: Options<CreateTonSiteData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTonSiteResponses, CreateTonSiteErrors, ThrowOnError>({
        url: '/api/v1/services/sites',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete the Ton Site
 */
export const deleteTonSite = <ThrowOnError extends boolean = false>(options: Options<DeleteTonSiteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTonSiteResponses, DeleteTonSiteErrors, ThrowOnError>({
        url: '/api/v1/services/sites/{id}',
        ...options
    });
};

/**
 * Add endpoints to the Ton Site
 */
export const updateTonSitesEndpoints = <ThrowOnError extends boolean = false>(options: Options<UpdateTonSitesEndpointsData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateTonSitesEndpointsResponses, UpdateTonSitesEndpointsErrors, ThrowOnError>({
        url: '/api/v1/services/sites/{id}/endpoints',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
