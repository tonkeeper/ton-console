// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:8888' | (string & {});
};

export type DTOOk = {
    ok: boolean;
};

export type DTOURL = {
    url: string;
};

export type DTOError = {
    /**
     * Error message
     */
    error: string;
    /**
     * backend error code
     */
    code: 1 | 2 | 3;
};

export type DTOUser = {
    id: number;
    /**
     * ID from the Telegram service
     */
    tg_id?: number;
    /**
     * TON wallet address
     */
    wallet_address?: string;
    first_name?: string;
    last_name?: string;
    avatar?: string;
    is_ban: boolean;
    invited_by?: number;
    referral_id: string;
    referrals_count: number;
    date_create: number;
};

export type DTOTgAuth = {
    id: number;
    first_name?: string;
    last_name?: string;
    photo_url?: string;
    username?: string;
    hash: string;
    auth_date: number;
    referral_id?: string;
};

export enum DTOTokenCapability {
    WEBHOOKS = 'webhooks'
}

export type DTOTonConnectProof = {
    promo_code?: string;
    address: string;
    proof: {
        timestamp?: number;
        domain?: string;
        signature?: string;
        payload?: string;
        state_init?: string;
    };
};

export type DTOTier = {
    id: number;
    name: string;
    rpc: number;
    usd_price: number;
    instant_payment: boolean;
};

export type DTOAppTier = {
    id: number;
    name: string;
    rpc: number;
    usd_price: number;
    long_polling_sub: number;
    entity_per_conn: number;
    capabilities: Array<string>;
    next_payment?: number;
    date_create: number;
    instant_payment: boolean;
};

export type DTOProServiceAppTier = {
    id: number;
    name: string;
    description?: string;
    amount: string;
    next_payment?: number;
    date_create: number;
};

export type DTOBillingTransaction = {
    id: string;
    type: 'deposit' | 'charge';
    /**
     * deposited amount
     */
    amount: string;
    currency: DTOCryptoCurrency;
    info: DTOBillingTxInfo;
    description: string;
    created_at: number;
};

export type DTOBillingTxInfo = ({
    reason: 'TonapiMonthlyPaymentMeta';
} & DTOTonapiMonthlyPaymentMeta) | ({
    reason: 'TonapiInstantPaymentMeta';
} & DTOTonapiInstantPaymentMeta) | ({
    reason: 'TonapiChangeTierMeta';
} & DTOTonapiChangeTierMeta) | ({
    reason: 'LiteproxyMonthlyPaymentMeta';
} & DTOLiteproxyMonthlyPaymentMeta) | ({
    reason: 'LiteproxyChangeTierMeta';
} & DTOLiteproxyChangeTierMeta) | ({
    reason: 'TestnetTonsPurchaseMeta';
} & DTOTestnetTonsPurchaseMeta) | ({
    reason: 'CnftIndexingPaymentMeta';
} & DTOCnftIndexingPaymentMeta) | ({
    reason: 'MessagePackagePurchaseMeta';
} & DTOMessagePackagePurchaseMeta) | ({
    reason: 'ChatGptRequestPaymentMeta';
} & DTOChatGptRequestPaymentMeta) | ({
    reason: 'PromoCodeActivationMeta';
} & DTOPromoCodeActivationMeta) | ({
    reason: 'StreamingApiPaymentMeta';
} & DTOStreamingApiPaymentMeta) | ({
    reason: 'ReplenishmentOfDepositMeta';
} & DTOReplenishmentOfDepositMeta) | ({
    reason: 'AnalyticsRequestPaymentMeta';
} & DTOAnalyticsRequestPaymentMeta) | ({
    reason: 'OtherMeta';
} & DTOOtherMeta);

export type DTOTonapiMonthlyPaymentMeta = {
    tier?: DTOTier;
};

export type DTOTonapiInstantPaymentMeta = {
    tier?: DTOTier;
};

export type DTOTonapiChangeTierMeta = {
    new_tier?: DTOTier;
};

export type DTOLiteproxyMonthlyPaymentMeta = {
    tier?: DTOLiteproxyTier;
};

export type DTOLiteproxyChangeTierMeta = {
    new_tier?: DTOLiteproxyTier;
};

export type DTOTestnetTonsPurchaseMeta = {
    testnet_coins?: string;
};

export type DTOCnftIndexingPaymentMeta = {
    collection?: string;
    count?: number;
};

export type DTOMessagePackagePurchaseMeta = {
    count?: number;
};

export type DTOPromoCodeActivationMeta = {
    promo_code?: string;
};

export type DTOStreamingApiPaymentMeta = {
    period?: number;
};

export type DTOReplenishmentOfDepositMeta = {
    tx_hash?: string;
};

export type DTOAnalyticsRequestPaymentMeta = {
    time?: number;
};

export type DTOChatGptRequestPaymentMeta = {
    [key: string]: unknown;
};

export type DTOOtherMeta = {
    [key: string]: unknown;
};

export type DTOBalance = {
    /**
     * deposited amount
     */
    amount: string;
    promo_amount: string;
};

export type DTOCharge = {
    id: string;
    service: DTOServiceName;
    tier_id?: number;
    messages_package_id?: number;
    testnet_price_multiplicator?: number;
    stats_spent_time?: number;
    stats_price_per_second?: number;
    stats_type_query?: DTOStatsQueryType;
    cnft_indexing_price?: number;
    cnft_count?: number;
    cnft_collections?: string;
    amount: number;
    exchange_rate: number;
    date_create: number;
};

export type DTOParticipant = {
    id: number;
    first_name?: string;
    last_name?: string;
    permissions: Array<'admin' | 'user'>;
    avatar?: string;
};

export type DTOProject = {
    id: number;
    name: string;
    avatar?: string;
    capabilities: Array<'invoices' | 'stats'>;
    date_create: number;
};

export type DTOProjectTonApiToken = {
    id: number;
    name: string;
    limit_rps?: number;
    token: string;
    origins: Array<string>;
    date_create: number;
    capabilities?: Array<DTOTokenCapability>;
};

export type DTOStats = {
    result: Array<{
        metric: {
            operation?: string;
        };
        values: Array<unknown>;
    }>;
    resultType: string;
};

export type DTOMessagesPackage = {
    id: number;
    name: string;
    limits: number;
    usd_price: number;
};

export type DTOStatsDashboard = {
    id: string;
    name?: string;
    project_id: number;
    query_ids?: Array<string>;
    public: boolean;
    attributes?: unknown;
    date_change: number;
    date_create: number;
};

export type DTOMessagesApp = {
    id: number;
    name: string;
    image?: string;
    project_id: number;
    url: string;
    verify: boolean;
    date_create: number;
};

export enum DTOStatsQueryStatus {
    EXECUTING = 'executing',
    SUCCESS = 'success',
    ERROR = 'error'
}

export type DTOStatsQuery = {
    name?: string;
    addresses?: Array<string>;
    only_between?: boolean;
    sql?: string;
    gpt_message?: string;
    /**
     * cyclic execution of requests
     */
    repeat_interval?: number;
};

export type DTOStatsQueryResult = {
    id: string;
    name?: string;
    status: DTOStatsQueryStatus;
    query?: DTOStatsQuery;
    type?: DTOStatsQueryType;
    estimate?: DTOStatsEstimateQuery;
    url?: string;
    meta_url?: string;
    spent_time?: number;
    last_repeat_date?: number;
    total_repetitions?: number;
    total_usd_cost?: number;
    usd_cost?: number;
    error?: string;
    all_data_in_preview?: boolean;
    preview?: Array<Array<string>>;
    testnet: boolean;
    is_gpt?: boolean;
    date_create: number;
};

export type DTOStatsEstimateQuery = {
    approximate_time: number;
    approximate_usd_cost: number;
    explain?: string;
};

export enum DTOStatsQueryType {
    GRAPH = 'graph',
    BASE_QUERY = 'base_query',
    CHAT_GPT_QUERY = 'chat_gpt_query'
}

export type DTOLang = string;

export enum DTOServiceName {
    MESSAGES = 'messages',
    STATS = 'stats',
    TONAPI = 'tonapi',
    TESTNET = 'testnet',
    PRO = 'pro',
    CNFT = 'cnft',
    LITEPROXY = 'liteproxy',
    STREAMING = 'streaming'
}

export type DTOMintlessJetton = {
    account: string;
};

export type DTOCnftCollection = {
    account: string;
    name: string;
    description?: string;
    image?: string;
    nft_count: number;
    minted_count: number;
    paid_indexing_count: number;
};

export type DTOTonSiteReduced = {
    endpoints: Array<string>;
    adnl_address: string;
    private_key: string;
};

export type DTOTonSite = {
    id: string;
    domain: string;
    endpoints: Array<string>;
    adnl_address: string;
    date_create: number;
};

export type DTOJettonAirdrop = {
    id: string;
    api_id: string;
    name: string;
    date_create: number;
    version: number;
};

export type DTOInvoicesInvoice = {
    id: string;
    amount: string;
    overpayment?: string;
    description: string;
    status: DTOInvoiceStatus;
    pay_to_address: string;
    paid_by_address?: string;
    payment_link: string;
    info?: unknown;
    date_change: number;
    date_expire: number;
    date_create: number;
    currency: DTOCryptoCurrency;
};

export type DTOInvoicesApp = {
    id: number;
    project_id: number;
    name: string;
    description: string;
    recipient_address: string;
    webhooks?: DTOInvoicesAppWebhooks;
    date_create: number;
};

export enum DTOInvoiceStatus {
    PENDING = 'pending',
    PAID = 'paid',
    CANCELLED = 'cancelled',
    EXPIRED = 'expired'
}

export enum DTOChain {
    MAINNET = 'mainnet',
    TESTNET = 'testnet'
}

export enum DTOCryptoCurrency {
    TON = 'TON',
    USDT = 'USDT'
}

export enum DTOInvoiceFieldOrder {
    ID = 'id',
    AMOUNT = 'amount',
    STATUS = 'status',
    LIFE_TIME = 'life_time',
    DESCRIPTION = 'description',
    PAY_TO_ADDRESS = 'pay_to_address',
    PAID_BY_ADDRESS = 'paid_by_address',
    DATE_CREATE = 'date_create',
    DATE_PAID = 'date_paid'
}

export type DTOInvoicesAppWebhooks = Array<{
    id: string;
    webhook: string;
}>;

export enum DTOCurrencies {
    USD = 'USD',
    EUR = 'EUR',
    RUB = 'RUB',
    AED = 'AED',
    KZT = 'KZT',
    UAH = 'UAH',
    GBP = 'GBP',
    CHF = 'CHF',
    CNY = 'CNY',
    KRW = 'KRW',
    IDR = 'IDR',
    INR = 'INR',
    JPY = 'JPY',
    TON = 'TON'
}

export type DTOAccount = {
    account: string;
};

export type DTOReferral = {
    id: number;
    first_name?: string;
    last_name?: string;
    profit: number;
};

export type DTOLiteproxyPrivateKey = {
    app_id: number;
    rps: number;
    private_key: string;
    date_create: number;
};

export type DTOLiteproxyKey = {
    server: string;
    rps: number;
    public_key: string;
    date_create: number;
};

export type DTOLiteproxyTier = {
    id: number;
    name: string;
    usd_price: number;
    rps: number;
};

export type DTOProjectLiteproxyTierDetail = {
    id: number;
    name: string;
    rps: number;
    usd_price: number;
    next_payment?: number;
    date_create: number;
};

/**
 * Query ID
 */
export type DTOqueryID = string;

/**
 * Token ID
 */
export type DTOtokenID = number;

/**
 * Project ID
 */
export type DTOprojectID = number;

/**
 * User ID
 */
export type DTOuserID = number;

/**
 * Promo code
 */
export type DTOpromoCode = string;

/**
 * App ID
 */
export type DTOappID = number;

/**
 * Webhook ID
 */
export type DTOwebhookID = string;

/**
 * Tier ID
 */
export type DTOtierID = number;

/**
 * Invoice ID
 */
export type DTOinvoiceID = string;

/**
 * Dashboard ID
 */
export type DTOdashboardID = string;

/**
 * Site ID
 */
export type DTOsiteID = string;

/**
 * Account
 */
export type DTOaccount = string;

/**
 * Project ID
 */
export type DTOqueryProjectID = number;

/**
 * Liteproxy server address
 */
export type DTOqueryLiteproxyServer = string;

/**
 * chain
 */
export type DTOqueryChain = DTOChain;

/**
 * Search ID
 */
export type DTOqueryInvoicesSearchID = string;

/**
 * Filter status
 */
export type DTOqueryFilterStatus = Array<DTOInvoiceStatus>;

/**
 * Overpayment
 */
export type DTOqueryFilterOverpayment = boolean;

/**
 * Limit
 */
export type DTOqueryLimit = number;

/**
 * Offset
 */
export type DTOqueryOffset = number;

/**
 * Before Billing TX
 */
export type DTObeforeBillingTx = string;

/**
 * Field
 */
export type DTOqueryFieldOrder = DTOInvoiceFieldOrder;

/**
 * Type order
 */
export enum DTOqueryTypeOrder {
    ASC = 'asc',
    DESC = 'desc'
}

/**
 * App ID
 */
export type DTOqueryAppID = number;

/**
 * Currency
 */
export type DTOqueryCryptoCurrency = DTOCryptoCurrency;

/**
 * Lang
 */
export type DTOqueryLang = DTOLang;

/**
 * Currency
 */
export type DTOqueryCurrency = DTOCurrencies;

/**
 * Start date
 */
export type DTOqueryStartDateRequired = number;

/**
 * End date
 */
export type DTOqueryEndDateRequired = number;

/**
 * Start date
 */
export type DTOqueryStartDate = number;

/**
 * End date
 */
export type DTOqueryEndDate = number;

/**
 * Step
 */
export type DTOqueryStep = number;

/**
 * Show more detailed information
 */
export type DTOqueryDetailed = boolean;

export enum DTOqueryGrafanaDashboard {
    TONAPI_TOKEN = 'tonapi_token',
    TONAPI_WEBHOOK = 'tonapi_webhook',
    LITEPROXY_REQUESTS = 'liteproxy_requests',
    LITEPROXY_CONNECTIONS = 'liteproxy_connections'
}

export type DTOqueryOnlyBetween = boolean;

/**
 * Addresses
 */
export type DTOqueryAddresses = string;

/**
 * Address
 */
export type DTOqueryAddress = string;

/**
 * cyclic execution of requests
 */
export type DTOqueryRepeatInterval = number;

export type DTOqueryStatsType = Array<DTOStatsQueryType>;

export type DTOqueryStatsIsRepetitive = boolean;

/**
 * Data that is expected
 */
export type DTONewJettonAirdrop = {
    api_id: string;
    name: string;
};

/**
 * Data that is expected from Telegram
 */
export type DTOTgAuthExpected = DTOTgAuth;

/**
 * Data that is expected
 */
export type DTONewTonSiteDomain = {
    domain: string;
};

/**
 * Data that is expected
 */
export type DTOTonSiteEndpoints = Array<string>;

/**
 * Data that is expected
 */
export type DTOProjectTonApiTokenReq = {
    name: string;
    limit_rps?: number;
    origins?: Array<string>;
    capabilities?: Array<DTOTokenCapability>;
};

/**
 * Data that is expected
 */
export type DTOProjectCreate = {
    name: string;
    image?: Blob | File;
};

/**
 * Data that is expected
 */
export type DTOProjectUpdate = {
    name?: string;
    image?: Blob | File;
    remove_image?: boolean;
};

/**
 * Data that is expected
 */
export type DTONewParticipant = {
    user_id: number;
};

/**
 * Data that is expected
 */
export type DTONewTier = {
    tier_id: number;
};

/**
 * Data that is expected
 */
export type DTOProjectMessagesBuyPackage = {
    id: number;
};

/**
 * Data that is expected
 */
export type DTOProjectMessagesApp = {
    url: string;
    name: string;
    image?: string;
};

/**
 * Data that is expected
 */
export type DTOProjectMessagesAppVerify = {
    payload: string;
};

/**
 * Data that is expected
 */
export type DTOProjectMessagesSendPush = {
    title?: string;
    message: string;
    /**
     * Link for user action, the link will open in Tonkeeper dApp Browser
     */
    link?: string;
    addresses?: Array<string>;
    /**
     * If the address has not been transmitted, then push messages will be sent to all users
     */
    address?: string;
};

/**
 * Data that is expected
 */
export type DTOTestnetBuyCoins = {
    address: string;
    /**
     * nano ton are expected
     */
    coins: number;
};

/**
 * Data that is expected
 */
export type DTOMessagesProjectCharge = {
    app_id: number;
    success_delivery: number;
    message: string;
    addresses?: Array<string>;
};

/**
 * Data that is expected
 */
export type DTOFeedback = {
    [key: string]: string;
};

/**
 * Data that is expected
 */
export type DTOStatsChatGpt = {
    message: string;
    context?: string;
};

/**
 * Data that is expected
 */
export type DTOStatsQueryUpdate = {
    name?: string;
    /**
     * cyclic execution of requests
     */
    repeat_interval?: number;
};

/**
 * Data that is expected
 */
export type DTOStatsQueryReq = {
    project_id: number;
    name?: string;
    query?: string;
    gpt_message?: string;
    /**
     * cyclic execution of requests
     */
    repeat_interval?: number;
};

/**
 * Data that is expected
 */
export type DTONewInvoicesApp = {
    name: string;
    description?: string;
    webhooks?: Array<string>;
    recipient_address: string;
};

/**
 * Data that is expected
 */
export type DTOInvoicesAppUpdate = {
    name?: string;
    description?: string;
    recipient_address?: string;
};

/**
 * Data that is expected
 */
export type DTOInvoiceCreate = {
    /**
     * nano ton are expected
     */
    amount: string;
    /**
     * seconds are expected
     */
    life_time: number;
    description?: string;
    currency?: DTOCryptoCurrency;
};

/**
 * Data that is expected
 */
export type DTOInvoiceChange = {
    refund_amount?: number;
    refunded?: boolean;
};

/**
 * Data that is expected
 */
export type DTOInvoiceWebhook = {
    webhook: string;
};

/**
 * Data that is expected
 */
export type DTOStatsDashboardReq = {
    name?: string;
    public?: boolean;
    active?: boolean;
    attributes?: unknown;
    query_ids?: Array<string>;
};

/**
 * Data that is expected
 */
export type DTOCnftIndexing = {
    account: string;
    count: number;
};

/**
 * Data that is expected
 */
export type DTOJettonMedia = {
    media: Blob | File;
};

/**
 * Data that is expected
 */
export type DTOJettonMeta = {
    meta: unknown;
};

export type PingReadyGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ready';
};

export type PingReadyGetErrors = {
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type PingReadyGetError = PingReadyGetErrors[keyof PingReadyGetErrors];

export type PingReadyGetResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type PingReadyHeadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ready';
};

export type PingReadyHeadErrors = {
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type PingReadyHeadError = PingReadyHeadErrors[keyof PingReadyHeadErrors];

export type PingReadyHeadResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type PingAliveGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/alive';
};

export type PingAliveGetErrors = {
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type PingAliveGetError = PingAliveGetErrors[keyof PingAliveGetErrors];

export type PingAliveGetResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type PingAliveHeadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/alive';
};

export type PingAliveHeadErrors = {
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type PingAliveHeadError = PingAliveHeadErrors[keyof PingAliveHeadErrors];

export type PingAliveHeadResponses = {
    /**
     * Ok
     */
    200: unknown;
};

export type FeedbackData = {
    /**
     * Data that is expected
     */
    body?: DTOFeedback;
    path?: never;
    query?: never;
    url: '/api/v1/feedback';
};

export type FeedbackErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type FeedbackError = FeedbackErrors[keyof FeedbackErrors];

export type FeedbackResponses = {
    /**
     * Ok
     */
    201: DTOOk;
};

export type FeedbackResponse = FeedbackResponses[keyof FeedbackResponses];

export type TestDeleteUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/test/user';
};

export type TestDeleteUserErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type TestDeleteUserError = TestDeleteUserErrors[keyof TestDeleteUserErrors];

export type TestDeleteUserResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type TestDeleteUserResponse = TestDeleteUserResponses[keyof TestDeleteUserResponses];

export type AdminMessagesChargeProjectData = {
    /**
     * Data that is expected
     */
    body?: DTOMessagesProjectCharge;
    path?: never;
    query?: never;
    url: '/api/v1/admin/messages/charge';
};

export type AdminMessagesChargeProjectErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AdminMessagesChargeProjectError = AdminMessagesChargeProjectErrors[keyof AdminMessagesChargeProjectErrors];

export type AdminMessagesChargeProjectResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type AdminMessagesChargeProjectResponse = AdminMessagesChargeProjectResponses[keyof AdminMessagesChargeProjectResponses];

export type AdminGetTonSitesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/sites';
};

export type AdminGetTonSitesErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AdminGetTonSitesError = AdminGetTonSitesErrors[keyof AdminGetTonSitesErrors];

export type AdminGetTonSitesResponses = {
    /**
     * Ton Sites reduced
     */
    200: {
        items: Array<DTOTonSiteReduced>;
    };
};

export type AdminGetTonSitesResponse = AdminGetTonSitesResponses[keyof AdminGetTonSitesResponses];

export type AuthViaTgData = {
    /**
     * Data that is expected from Telegram
     */
    body?: DTOTgAuthExpected;
    path?: never;
    query?: never;
    url: '/api/v1/auth/tg';
};

export type AuthViaTgErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AuthViaTgError = AuthViaTgErrors[keyof AuthViaTgErrors];

export type AuthViaTgResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type AuthViaTgResponse = AuthViaTgResponses[keyof AuthViaTgResponses];

export type AuthGeneratePayloadData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/proof/payload';
};

export type AuthGeneratePayloadErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AuthGeneratePayloadError = AuthGeneratePayloadErrors[keyof AuthGeneratePayloadErrors];

export type AuthGeneratePayloadResponses = {
    /**
     * Payload for TON Connect
     */
    200: {
        payload: string;
    };
};

export type AuthGeneratePayloadResponse = AuthGeneratePayloadResponses[keyof AuthGeneratePayloadResponses];

export type AuthViaTonConnectData = {
    /**
     * Data that is expected
     */
    body?: DTOTonConnectProof;
    path?: never;
    query?: never;
    url: '/api/v1/auth/proof/check';
};

export type AuthViaTonConnectErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AuthViaTonConnectError = AuthViaTonConnectErrors[keyof AuthViaTonConnectErrors];

export type AuthViaTonConnectResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type AuthViaTonConnectResponse = AuthViaTonConnectResponses[keyof AuthViaTonConnectResponses];

export type GetUserInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/me';
};

export type GetUserInfoErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetUserInfoError = GetUserInfoErrors[keyof GetUserInfoErrors];

export type GetUserInfoResponses = {
    /**
     * User info
     */
    200: {
        user: DTOUser;
    };
};

export type GetUserInfoResponse = GetUserInfoResponses[keyof GetUserInfoResponses];

export type GetUserReferralsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/user/referrals';
};

export type GetUserReferralsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetUserReferralsError = GetUserReferralsErrors[keyof GetUserReferralsErrors];

export type GetUserReferralsResponses = {
    /**
     * User referrals
     */
    200: {
        items: Array<DTOReferral>;
        total_profit: number;
    };
};

export type GetUserReferralsResponse = GetUserReferralsResponses[keyof GetUserReferralsResponses];

export type AccountLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/account/logout';
};

export type AccountLogoutErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AccountLogoutError = AccountLogoutErrors[keyof AccountLogoutErrors];

export type AccountLogoutResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type AccountLogoutResponse = AccountLogoutResponses[keyof AccountLogoutResponses];

export type CreateProjectData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectCreate;
    path?: never;
    query?: never;
    url: '/api/v1/project';
};

export type CreateProjectErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors];

export type CreateProjectResponses = {
    /**
     * Project
     */
    201: {
        project: DTOProject;
    };
};

export type CreateProjectResponse = CreateProjectResponses[keyof CreateProjectResponses];

export type GetProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/projects';
};

export type GetProjectsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectsError = GetProjectsErrors[keyof GetProjectsErrors];

export type GetProjectsResponses = {
    /**
     * User projects
     */
    200: {
        items: Array<DTOProject>;
    };
};

export type GetProjectsResponse = GetProjectsResponses[keyof GetProjectsResponses];

export type DeleteProjectData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/project/{id}';
};

export type DeleteProjectErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type DeleteProjectError = DeleteProjectErrors[keyof DeleteProjectErrors];

export type DeleteProjectResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type DeleteProjectResponse = DeleteProjectResponses[keyof DeleteProjectResponses];

export type UpdateProjectData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectUpdate;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/project/{id}';
};

export type UpdateProjectErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateProjectError = UpdateProjectErrors[keyof UpdateProjectErrors];

export type UpdateProjectResponses = {
    /**
     * Project
     */
    200: {
        project: DTOProject;
    };
};

export type UpdateProjectResponse = UpdateProjectResponses[keyof UpdateProjectResponses];

export type GetDepositAddressData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/project/{id}/deposit/address';
};

export type GetDepositAddressErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetDepositAddressError = GetDepositAddressErrors[keyof GetDepositAddressErrors];

export type GetDepositAddressResponses = {
    /**
     * Deposit wallet
     */
    200: {
        ton_deposit_wallet?: string;
        usdt_deposit_wallet: string;
    };
};

export type GetDepositAddressResponse = GetDepositAddressResponses[keyof GetDepositAddressResponses];

export type GetProjectBillingHistoryData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: {
        /**
         * Before Billing TX
         */
        before_tx?: string;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/project/{id}/billing/history';
};

export type GetProjectBillingHistoryErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectBillingHistoryError = GetProjectBillingHistoryErrors[keyof GetProjectBillingHistoryErrors];

export type GetProjectBillingHistoryResponses = {
    /**
     * Billing history
     */
    200: {
        usdt_balance: DTOBalance;
        ton_balance?: DTOBalance;
        history: Array<DTOBillingTransaction>;
    };
};

export type GetProjectBillingHistoryResponse = GetProjectBillingHistoryResponses[keyof GetProjectBillingHistoryResponses];

export type PromoCodeDepositProjectData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
        /**
         * Promo code
         */
        promo_code: string;
    };
    query?: never;
    url: '/api/v1/project/{id}/promocode/{promo_code}';
};

export type PromoCodeDepositProjectErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type PromoCodeDepositProjectError = PromoCodeDepositProjectErrors[keyof PromoCodeDepositProjectErrors];

export type PromoCodeDepositProjectResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type PromoCodeDepositProjectResponse = PromoCodeDepositProjectResponses[keyof PromoCodeDepositProjectResponses];

export type ProjectPaymentsHistoryData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: {
        /**
         * Offset
         */
        offset?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/project/{id}/payments/history';
};

export type ProjectPaymentsHistoryErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type ProjectPaymentsHistoryError = ProjectPaymentsHistoryErrors[keyof ProjectPaymentsHistoryErrors];

export type ProjectPaymentsHistoryResponses = {
    /**
     * Project payments history
     */
    200: {
        count: number;
        history: Array<DTOCharge>;
    };
};

export type ProjectPaymentsHistoryResponse = ProjectPaymentsHistoryResponses[keyof ProjectPaymentsHistoryResponses];

export type GetProjectParticipantsData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/project/{id}/participants';
};

export type GetProjectParticipantsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectParticipantsError = GetProjectParticipantsErrors[keyof GetProjectParticipantsErrors];

export type GetProjectParticipantsResponses = {
    /**
     * List of project participants
     */
    200: {
        items: Array<DTOParticipant>;
    };
};

export type GetProjectParticipantsResponse = GetProjectParticipantsResponses[keyof GetProjectParticipantsResponses];

export type AddProjectParticipantData = {
    /**
     * Data that is expected
     */
    body?: DTONewParticipant;
    path: {
        /**
         * Project ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/project/{id}/participants';
};

export type AddProjectParticipantErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AddProjectParticipantError = AddProjectParticipantErrors[keyof AddProjectParticipantErrors];

export type AddProjectParticipantResponses = {
    /**
     * Participant
     */
    201: {
        participant: DTOParticipant;
    };
};

export type AddProjectParticipantResponse = AddProjectParticipantResponses[keyof AddProjectParticipantResponses];

export type DeleteProjectParticipantData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        id: number;
        /**
         * User ID
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/project/{id}/participant/{user_id}';
};

export type DeleteProjectParticipantErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type DeleteProjectParticipantError = DeleteProjectParticipantErrors[keyof DeleteProjectParticipantErrors];

export type DeleteProjectParticipantResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type DeleteProjectParticipantResponse = DeleteProjectParticipantResponses[keyof DeleteProjectParticipantResponses];

export type GetProjectTonApiTokensData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/tokens';
};

export type GetProjectTonApiTokensErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectTonApiTokensError = GetProjectTonApiTokensErrors[keyof GetProjectTonApiTokensErrors];

export type GetProjectTonApiTokensResponses = {
    /**
     * Project TonAPI tokens
     */
    200: {
        items: Array<DTOProjectTonApiToken>;
    };
};

export type GetProjectTonApiTokensResponse = GetProjectTonApiTokensResponses[keyof GetProjectTonApiTokensResponses];

export type GenerateProjectTonApiTokenData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectTonApiTokenReq;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/generate/token';
};

export type GenerateProjectTonApiTokenErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GenerateProjectTonApiTokenError = GenerateProjectTonApiTokenErrors[keyof GenerateProjectTonApiTokenErrors];

export type GenerateProjectTonApiTokenResponses = {
    /**
     * Project TonAPI token
     */
    201: {
        token: DTOProjectTonApiToken;
    };
};

export type GenerateProjectTonApiTokenResponse = GenerateProjectTonApiTokenResponses[keyof GenerateProjectTonApiTokenResponses];

export type DeleteProjectTonApiTokenData = {
    body?: never;
    path: {
        /**
         * Token ID
         */
        id: number;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/token/{id}';
};

export type DeleteProjectTonApiTokenErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type DeleteProjectTonApiTokenError = DeleteProjectTonApiTokenErrors[keyof DeleteProjectTonApiTokenErrors];

export type DeleteProjectTonApiTokenResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type DeleteProjectTonApiTokenResponse = DeleteProjectTonApiTokenResponses[keyof DeleteProjectTonApiTokenResponses];

export type UpdateProjectTonApiTokenData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectTonApiTokenReq;
    path: {
        /**
         * Token ID
         */
        id: number;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/token/{id}';
};

export type UpdateProjectTonApiTokenErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateProjectTonApiTokenError = UpdateProjectTonApiTokenErrors[keyof UpdateProjectTonApiTokenErrors];

export type UpdateProjectTonApiTokenResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type UpdateProjectTonApiTokenResponse = UpdateProjectTonApiTokenResponses[keyof UpdateProjectTonApiTokenResponses];

export type GetProjectTonApiTierData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/tier';
};

export type GetProjectTonApiTierErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectTonApiTierError = GetProjectTonApiTierErrors[keyof GetProjectTonApiTierErrors];

export type GetProjectTonApiTierResponses = {
    /**
     * Project tier
     */
    200: {
        tier: DTOAppTier;
    };
};

export type GetProjectTonApiTierResponse = GetProjectTonApiTierResponses[keyof GetProjectTonApiTierResponses];

export type UpdateProjectTonApiTierData = {
    /**
     * Data that is expected
     */
    body?: DTONewTier;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/tier';
};

export type UpdateProjectTonApiTierErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateProjectTonApiTierError = UpdateProjectTonApiTierErrors[keyof UpdateProjectTonApiTierErrors];

export type UpdateProjectTonApiTierResponses = {
    /**
     * Project tier
     */
    200: {
        tier: DTOAppTier;
    };
};

export type UpdateProjectTonApiTierResponse = UpdateProjectTonApiTierResponses[keyof UpdateProjectTonApiTierResponses];

export type ValidChangeTonApiTierData = {
    body?: never;
    path: {
        /**
         * Tier ID
         */
        id: number;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/tier/valid/buy/{id}';
};

export type ValidChangeTonApiTierErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type ValidChangeTonApiTierError = ValidChangeTonApiTierErrors[keyof ValidChangeTonApiTierErrors];

export type ValidChangeTonApiTierResponses = {
    /**
     * Valid change tier for project
     */
    200: {
        /**
         * is valid
         */
        valid: boolean;
        unspent_money?: number;
        details?: string;
    };
};

export type ValidChangeTonApiTierResponse = ValidChangeTonApiTierResponses[keyof ValidChangeTonApiTierResponses];

export type GetTonApiTiersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/services/tonapi/tiers';
};

export type GetTonApiTiersErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetTonApiTiersError = GetTonApiTiersErrors[keyof GetTonApiTiersErrors];

export type GetTonApiTiersResponses = {
    /**
     * Active TonAPI tiers
     */
    200: {
        items: Array<DTOTier>;
    };
};

export type GetTonApiTiersResponse = GetTonApiTiersResponses[keyof GetTonApiTiersResponses];

export type GetProjectTonApiStatsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
        /**
         * Start date
         */
        start: number;
        /**
         * End date
         */
        end: number;
        /**
         * Step
         */
        step?: number;
        /**
         * Show more detailed information
         */
        detailed?: boolean;
        dashboard?: 'tonapi_token' | 'tonapi_webhook' | 'liteproxy_requests' | 'liteproxy_connections';
    };
    url: '/api/v1/services/tonapi/stats';
};

export type GetProjectTonApiStatsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectTonApiStatsError = GetProjectTonApiStatsErrors[keyof GetProjectTonApiStatsErrors];

export type GetProjectTonApiStatsResponses = {
    /**
     * Project TonApi stats
     */
    200: {
        stats: unknown;
    };
};

export type GetProjectTonApiStatsResponse = GetProjectTonApiStatsResponses[keyof GetProjectTonApiStatsResponses];

export type AdminGetLiteproxyPrivateKeysData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Liteproxy server address
         */
        server: string;
    };
    url: '/api/v1/services/tonapi/liteproxy/private_keys';
};

export type AdminGetLiteproxyPrivateKeysErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type AdminGetLiteproxyPrivateKeysError = AdminGetLiteproxyPrivateKeysErrors[keyof AdminGetLiteproxyPrivateKeysErrors];

export type AdminGetLiteproxyPrivateKeysResponses = {
    /**
     * Private keys for the liteproxy server
     */
    200: {
        keys: Array<DTOLiteproxyPrivateKey>;
    };
};

export type AdminGetLiteproxyPrivateKeysResponse = AdminGetLiteproxyPrivateKeysResponses[keyof AdminGetLiteproxyPrivateKeysResponses];

export type GetLiteproxyKeysData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/liteproxy/keys';
};

export type GetLiteproxyKeysErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetLiteproxyKeysError = GetLiteproxyKeysErrors[keyof GetLiteproxyKeysErrors];

export type GetLiteproxyKeysResponses = {
    /**
     * Keys for connecting to liteproxy servers
     */
    200: {
        keys: Array<DTOLiteproxyKey>;
    };
};

export type GetLiteproxyKeysResponse = GetLiteproxyKeysResponses[keyof GetLiteproxyKeysResponses];

export type CreateLiteproxyKeysData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/liteproxy/keys';
};

export type CreateLiteproxyKeysErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateLiteproxyKeysError = CreateLiteproxyKeysErrors[keyof CreateLiteproxyKeysErrors];

export type CreateLiteproxyKeysResponses = {
    /**
     * Keys for connecting to liteproxy servers
     */
    201: {
        keys: Array<DTOLiteproxyKey>;
    };
};

export type CreateLiteproxyKeysResponse = CreateLiteproxyKeysResponses[keyof CreateLiteproxyKeysResponses];

export type GetLiteproxyTiersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/services/tonapi/liteproxy/tiers';
};

export type GetLiteproxyTiersErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetLiteproxyTiersError = GetLiteproxyTiersErrors[keyof GetLiteproxyTiersErrors];

export type GetLiteproxyTiersResponses = {
    /**
     * Active tiers for the liteproxy server
     */
    200: {
        tiers: Array<DTOLiteproxyTier>;
    };
};

export type GetLiteproxyTiersResponse = GetLiteproxyTiersResponses[keyof GetLiteproxyTiersResponses];

export type GetProjectLiteproxyTierData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/liteproxy/tier';
};

export type GetProjectLiteproxyTierErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectLiteproxyTierError = GetProjectLiteproxyTierErrors[keyof GetProjectLiteproxyTierErrors];

export type GetProjectLiteproxyTierResponses = {
    /**
     * Active the project tier for the liteproxy server
     */
    200: {
        tier: DTOProjectLiteproxyTierDetail;
    };
};

export type GetProjectLiteproxyTierResponse = GetProjectLiteproxyTierResponses[keyof GetProjectLiteproxyTierResponses];

export type UpdateLiteproxyTierData = {
    /**
     * Data that is expected
     */
    body?: DTONewTier;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/liteproxy/tier';
};

export type UpdateLiteproxyTierErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Insufficient funds
     */
    409: {
        /**
         * Error message
         */
        error: string;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateLiteproxyTierError = UpdateLiteproxyTierErrors[keyof UpdateLiteproxyTierErrors];

export type UpdateLiteproxyTierResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type UpdateLiteproxyTierResponse = UpdateLiteproxyTierResponses[keyof UpdateLiteproxyTierResponses];

export type ValidChangeLiteproxyTierData = {
    body?: never;
    path: {
        /**
         * Tier ID
         */
        id: number;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/tonapi/liteproxy/tier/valid/buy/{id}';
};

export type ValidChangeLiteproxyTierErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type ValidChangeLiteproxyTierError = ValidChangeLiteproxyTierErrors[keyof ValidChangeLiteproxyTierErrors];

export type ValidChangeLiteproxyTierResponses = {
    /**
     * Valid change tier for project
     */
    200: {
        /**
         * is valid
         */
        valid: boolean;
        unspent_money?: number;
        details?: string;
    };
};

export type ValidChangeLiteproxyTierResponse = ValidChangeLiteproxyTierResponses[keyof ValidChangeLiteproxyTierResponses];

export type GetMessagesPackagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/services/messages/packages';
};

export type GetMessagesPackagesErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetMessagesPackagesError = GetMessagesPackagesErrors[keyof GetMessagesPackagesErrors];

export type GetMessagesPackagesResponses = {
    /**
     * Messages packages
     */
    200: {
        items: Array<DTOMessagesPackage>;
    };
};

export type GetMessagesPackagesResponse = GetMessagesPackagesResponses[keyof GetMessagesPackagesResponses];

export type BuyMessagesPackageData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectMessagesBuyPackage;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/messages/package';
};

export type BuyMessagesPackageErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type BuyMessagesPackageError = BuyMessagesPackageErrors[keyof BuyMessagesPackageErrors];

export type BuyMessagesPackageResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type BuyMessagesPackageResponse = BuyMessagesPackageResponses[keyof BuyMessagesPackageResponses];

export type DeleteProjectMessagesAppData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/messages/app';
};

export type DeleteProjectMessagesAppErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type DeleteProjectMessagesAppError = DeleteProjectMessagesAppErrors[keyof DeleteProjectMessagesAppErrors];

export type DeleteProjectMessagesAppResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type DeleteProjectMessagesAppResponse = DeleteProjectMessagesAppResponses[keyof DeleteProjectMessagesAppResponses];

export type CreateProjectMessagesAppData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectMessagesApp;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/messages/app';
};

export type CreateProjectMessagesAppErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateProjectMessagesAppError = CreateProjectMessagesAppErrors[keyof CreateProjectMessagesAppErrors];

export type CreateProjectMessagesAppResponses = {
    /**
     * Messages app has been created
     */
    200: {
        payload: string;
        valid_until: number;
    };
};

export type CreateProjectMessagesAppResponse = CreateProjectMessagesAppResponses[keyof CreateProjectMessagesAppResponses];

export type VerifyProjectMessagesAppData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectMessagesAppVerify;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/messages/app/verify';
};

export type VerifyProjectMessagesAppErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type VerifyProjectMessagesAppError = VerifyProjectMessagesAppErrors[keyof VerifyProjectMessagesAppErrors];

export type VerifyProjectMessagesAppResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type VerifyProjectMessagesAppResponse = VerifyProjectMessagesAppResponses[keyof VerifyProjectMessagesAppResponses];

export type GetProjectMessagesAppsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/messages/apps';
};

export type GetProjectMessagesAppsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectMessagesAppsError = GetProjectMessagesAppsErrors[keyof GetProjectMessagesAppsErrors];

export type GetProjectMessagesAppsResponses = {
    /**
     * Project messages apps
     */
    200: {
        items: Array<DTOMessagesApp>;
    };
};

export type GetProjectMessagesAppsResponse = GetProjectMessagesAppsResponses[keyof GetProjectMessagesAppsResponses];

export type GetProjectMessagesBalanceData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/messages/balance';
};

export type GetProjectMessagesBalanceErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectMessagesBalanceError = GetProjectMessagesBalanceErrors[keyof GetProjectMessagesBalanceErrors];

export type GetProjectMessagesBalanceResponses = {
    /**
     * Project messages balance
     */
    200: {
        balance: number;
    };
};

export type GetProjectMessagesBalanceResponse = GetProjectMessagesBalanceResponses[keyof GetProjectMessagesBalanceResponses];

export type GetProjectMessagesAppTokenData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/messages/token';
};

export type GetProjectMessagesAppTokenErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectMessagesAppTokenError = GetProjectMessagesAppTokenErrors[keyof GetProjectMessagesAppTokenErrors];

export type GetProjectMessagesAppTokenResponses = {
    /**
     * Project messages app token
     */
    200: {
        token: string;
    };
};

export type GetProjectMessagesAppTokenResponse = GetProjectMessagesAppTokenResponses[keyof GetProjectMessagesAppTokenResponses];

export type RegenerateProjectMessagesAppTokenData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/messages/token';
};

export type RegenerateProjectMessagesAppTokenErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type RegenerateProjectMessagesAppTokenError = RegenerateProjectMessagesAppTokenErrors[keyof RegenerateProjectMessagesAppTokenErrors];

export type RegenerateProjectMessagesAppTokenResponses = {
    /**
     * Project messages app token
     */
    200: {
        token: string;
    };
};

export type RegenerateProjectMessagesAppTokenResponse = RegenerateProjectMessagesAppTokenResponses[keyof RegenerateProjectMessagesAppTokenResponses];

export type GetProjectMessagesStatsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/messages/stats';
};

export type GetProjectMessagesStatsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetProjectMessagesStatsError = GetProjectMessagesStatsErrors[keyof GetProjectMessagesStatsErrors];

export type GetProjectMessagesStatsResponses = {
    /**
     * Project messages stats
     */
    200: {
        stats: {
            users: number;
            sent_in_week: number;
            enable_notifications: number;
            available_messages: number;
        };
    };
};

export type GetProjectMessagesStatsResponse = GetProjectMessagesStatsResponses[keyof GetProjectMessagesStatsResponses];

export type SendProjectMessagesPushData = {
    /**
     * Data that is expected
     */
    body?: DTOProjectMessagesSendPush;
    path?: never;
    query?: never;
    url: '/api/v1/services/messages/push';
};

export type SendProjectMessagesPushErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type SendProjectMessagesPushError = SendProjectMessagesPushErrors[keyof SendProjectMessagesPushErrors];

export type SendProjectMessagesPushResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type SendProjectMessagesPushResponse = SendProjectMessagesPushResponses[keyof SendProjectMessagesPushResponses];

export type GetTestnetAvailableData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/services/testnet/available';
};

export type GetTestnetAvailableErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetTestnetAvailableError = GetTestnetAvailableErrors[keyof GetTestnetAvailableErrors];

export type GetTestnetAvailableResponses = {
    /**
     * Available balance
     */
    200: {
        balance: number;
        usd_per_testnet_ton: number;
    };
};

export type GetTestnetAvailableResponse = GetTestnetAvailableResponses[keyof GetTestnetAvailableResponses];

export type BuyTestnetCoinsData = {
    /**
     * Data that is expected
     */
    body?: DTOTestnetBuyCoins;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/testnet/buy/coins';
};

export type BuyTestnetCoinsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type BuyTestnetCoinsError = BuyTestnetCoinsErrors[keyof BuyTestnetCoinsErrors];

export type BuyTestnetCoinsResponses = {
    /**
     * Message hash
     */
    200: {
        hash: string;
    };
};

export type BuyTestnetCoinsResponse = BuyTestnetCoinsResponses[keyof BuyTestnetCoinsResponses];

export type GetStatsDdlData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * chain
         */
        chain?: DTOChain;
    };
    url: '/api/v1/services/stats/ddl';
};

export type GetStatsDdlErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetStatsDdlError = GetStatsDdlErrors[keyof GetStatsDdlErrors];

export type GetStatsDdlResponses = {
    /**
     * Stats db ddl
     */
    200: Blob | File;
};

export type GetStatsDdlResponse = GetStatsDdlResponses[keyof GetStatsDdlResponses];

export type EstimateStatsQueryData = {
    /**
     * Data that is expected
     */
    body?: DTOStatsQueryReq;
    path?: never;
    query?: {
        /**
         * chain
         */
        chain?: DTOChain;
    };
    url: '/api/v1/services/stats/query/estimate';
};

export type EstimateStatsQueryErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type EstimateStatsQueryError = EstimateStatsQueryErrors[keyof EstimateStatsQueryErrors];

export type EstimateStatsQueryResponses = {
    /**
     * Estimate query
     */
    200: DTOStatsEstimateQuery;
};

export type EstimateStatsQueryResponse = EstimateStatsQueryResponses[keyof EstimateStatsQueryResponses];

export type SendQueryToStatsData = {
    /**
     * Data that is expected
     */
    body?: DTOStatsQueryReq;
    path?: never;
    query?: {
        /**
         * chain
         */
        chain?: DTOChain;
    };
    url: '/api/v1/services/stats/query';
};

export type SendQueryToStatsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Insufficient funds
     */
    409: {
        /**
         * Error message
         */
        error: string;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type SendQueryToStatsError = SendQueryToStatsErrors[keyof SendQueryToStatsErrors];

export type SendQueryToStatsResponses = {
    /**
     * Query result
     */
    201: DTOStatsQueryResult;
};

export type SendQueryToStatsResponse = SendQueryToStatsResponses[keyof SendQueryToStatsResponses];

export type GetSqlResultFromStatsData = {
    body?: never;
    path: {
        /**
         * Query ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/services/stats/query/{id}';
};

export type GetSqlResultFromStatsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetSqlResultFromStatsError = GetSqlResultFromStatsErrors[keyof GetSqlResultFromStatsErrors];

export type GetSqlResultFromStatsResponses = {
    /**
     * Query result
     */
    200: DTOStatsQueryResult;
};

export type GetSqlResultFromStatsResponse = GetSqlResultFromStatsResponses[keyof GetSqlResultFromStatsResponses];

export type UpdateStatsQueryData = {
    /**
     * Data that is expected
     */
    body?: DTOStatsQueryUpdate;
    path: {
        /**
         * Query ID
         */
        id: string;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/stats/query/{id}';
};

export type UpdateStatsQueryErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateStatsQueryError = UpdateStatsQueryErrors[keyof UpdateStatsQueryErrors];

export type UpdateStatsQueryResponses = {
    /**
     * Query
     */
    200: DTOStatsQuery;
};

export type UpdateStatsQueryResponse = UpdateStatsQueryResponses[keyof UpdateStatsQueryResponses];

export type GetSqlHistoryFromStatsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
        /**
         * Offset
         */
        offset?: number;
        /**
         * Limit
         */
        limit?: number;
        type?: Array<DTOStatsQueryType>;
        is_repetitive?: boolean;
        /**
         * chain
         */
        chain?: DTOChain;
    };
    url: '/api/v1/services/stats/queries/history';
};

export type GetSqlHistoryFromStatsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetSqlHistoryFromStatsError = GetSqlHistoryFromStatsErrors[keyof GetSqlHistoryFromStatsErrors];

export type GetSqlHistoryFromStatsResponses = {
    /**
     * History of queries
     */
    200: {
        count: number;
        items: Array<DTOStatsQueryResult>;
    };
};

export type GetSqlHistoryFromStatsResponse = GetSqlHistoryFromStatsResponses[keyof GetSqlHistoryFromStatsResponses];

export type GetGraphFromStatsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * chain
         */
        chain?: DTOChain;
        /**
         * Addresses
         */
        addresses: string;
        only_between?: boolean;
        /**
         * Project ID
         */
        project_id: number;
        /**
         * cyclic execution of requests
         */
        repeat_interval?: number;
    };
    url: '/api/v1/services/stats/cosmos/graph';
};

export type GetGraphFromStatsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Insufficient funds
     */
    409: {
        /**
         * Error message
         */
        error: string;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetGraphFromStatsError = GetGraphFromStatsErrors[keyof GetGraphFromStatsErrors];

export type GetGraphFromStatsResponses = {
    /**
     * Query result
     */
    200: DTOStatsQueryResult;
};

export type GetGraphFromStatsResponse = GetGraphFromStatsResponses[keyof GetGraphFromStatsResponses];

export type StatsChatGptRequestData = {
    /**
     * Data that is expected
     */
    body?: DTOStatsChatGpt;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
        /**
         * chain
         */
        chain?: DTOChain;
    };
    url: '/api/v1/services/stats/gpt';
};

export type StatsChatGptRequestErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type StatsChatGptRequestError = StatsChatGptRequestErrors[keyof StatsChatGptRequestErrors];

export type StatsChatGptRequestResponses = {
    /**
     * Answer from ChatGPT
     */
    200: {
        message: string;
        valid: boolean;
    };
};

export type StatsChatGptRequestResponse = StatsChatGptRequestResponses[keyof StatsChatGptRequestResponses];

export type GetStatsChatGptPriceData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/stats/price/gpt';
};

export type GetStatsChatGptPriceErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetStatsChatGptPriceError = GetStatsChatGptPriceErrors[keyof GetStatsChatGptPriceErrors];

export type GetStatsChatGptPriceResponses = {
    /**
     * Price per request for ChatGPT
     */
    200: {
        free_requests: number;
        used: number;
        usd_price: number;
    };
};

export type GetStatsChatGptPriceResponse = GetStatsChatGptPriceResponses[keyof GetStatsChatGptPriceResponses];

export type CreateStatsDashboardData = {
    /**
     * Data that is expected
     */
    body?: DTOStatsDashboardReq;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/stats/dashboard';
};

export type CreateStatsDashboardErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateStatsDashboardError = CreateStatsDashboardErrors[keyof CreateStatsDashboardErrors];

export type CreateStatsDashboardResponses = {
    /**
     * Dashboard
     */
    201: DTOStatsDashboard;
};

export type CreateStatsDashboardResponse = CreateStatsDashboardResponses[keyof CreateStatsDashboardResponses];

export type GetStatsDashboardData = {
    body?: never;
    path: {
        /**
         * Dashboard ID
         */
        id: string;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/stats/dashboard/{id}';
};

export type GetStatsDashboardErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetStatsDashboardError = GetStatsDashboardErrors[keyof GetStatsDashboardErrors];

export type GetStatsDashboardResponses = {
    /**
     * Dashboard
     */
    200: DTOStatsDashboard;
};

export type GetStatsDashboardResponse = GetStatsDashboardResponses[keyof GetStatsDashboardResponses];

export type UpdateStatsDashboardData = {
    /**
     * Data that is expected
     */
    body?: DTOStatsDashboardReq;
    path: {
        /**
         * Dashboard ID
         */
        id: string;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/stats/dashboard/{id}';
};

export type UpdateStatsDashboardErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateStatsDashboardError = UpdateStatsDashboardErrors[keyof UpdateStatsDashboardErrors];

export type UpdateStatsDashboardResponses = {
    /**
     * Dashboard
     */
    200: DTOStatsDashboard;
};

export type UpdateStatsDashboardResponse = UpdateStatsDashboardResponses[keyof UpdateStatsDashboardResponses];

export type GetStatsDashboardsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/stats/dashboards';
};

export type GetStatsDashboardsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetStatsDashboardsError = GetStatsDashboardsErrors[keyof GetStatsDashboardsErrors];

export type GetStatsDashboardsResponses = {
    /**
     * Dashboards
     */
    200: {
        items: Array<DTOStatsDashboard>;
    };
};

export type GetStatsDashboardsResponse = GetStatsDashboardsResponses[keyof GetStatsDashboardsResponses];

export type GetInvoicesAppData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/invoices/app';
};

export type GetInvoicesAppErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetInvoicesAppError = GetInvoicesAppErrors[keyof GetInvoicesAppErrors];

export type GetInvoicesAppResponses = {
    /**
     * Invoices app
     */
    200: {
        app: DTOInvoicesApp;
    };
};

export type GetInvoicesAppResponse = GetInvoicesAppResponses[keyof GetInvoicesAppResponses];

export type CreateInvoicesAppData = {
    /**
     * Data that is expected
     */
    body?: DTONewInvoicesApp;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/invoices/app';
};

export type CreateInvoicesAppErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateInvoicesAppError = CreateInvoicesAppErrors[keyof CreateInvoicesAppErrors];

export type CreateInvoicesAppResponses = {
    /**
     * Invoices app
     */
    201: {
        app: DTOInvoicesApp;
    };
};

export type CreateInvoicesAppResponse = CreateInvoicesAppResponses[keyof CreateInvoicesAppResponses];

export type DeleteInvoicesAppData = {
    body?: never;
    path: {
        /**
         * App ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/services/invoices/app/{id}';
};

export type DeleteInvoicesAppErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type DeleteInvoicesAppError = DeleteInvoicesAppErrors[keyof DeleteInvoicesAppErrors];

export type DeleteInvoicesAppResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type DeleteInvoicesAppResponse = DeleteInvoicesAppResponses[keyof DeleteInvoicesAppResponses];

export type UpdateInvoicesAppData = {
    /**
     * Data that is expected
     */
    body?: DTOInvoicesAppUpdate;
    path: {
        /**
         * App ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/services/invoices/app/{id}';
};

export type UpdateInvoicesAppErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateInvoicesAppError = UpdateInvoicesAppErrors[keyof UpdateInvoicesAppErrors];

export type UpdateInvoicesAppResponses = {
    /**
     * Invoices app
     */
    200: {
        app: DTOInvoicesApp;
    };
};

export type UpdateInvoicesAppResponse = UpdateInvoicesAppResponses[keyof UpdateInvoicesAppResponses];

export type CreateInvoicesAppWebhookData = {
    /**
     * Data that is expected
     */
    body?: DTOInvoiceWebhook;
    path: {
        /**
         * App ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/services/invoices/app/{id}/webhook';
};

export type CreateInvoicesAppWebhookErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateInvoicesAppWebhookError = CreateInvoicesAppWebhookErrors[keyof CreateInvoicesAppWebhookErrors];

export type CreateInvoicesAppWebhookResponses = {
    /**
     * Invoices app
     */
    200: {
        app: DTOInvoicesApp;
    };
};

export type CreateInvoicesAppWebhookResponse = CreateInvoicesAppWebhookResponses[keyof CreateInvoicesAppWebhookResponses];

export type DeleteInvoicesAppWebhookData = {
    body?: never;
    path: {
        /**
         * App ID
         */
        id: number;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v1/services/invoices/app/{id}/webhook/{webhook_id}';
};

export type DeleteInvoicesAppWebhookErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type DeleteInvoicesAppWebhookError = DeleteInvoicesAppWebhookErrors[keyof DeleteInvoicesAppWebhookErrors];

export type DeleteInvoicesAppWebhookResponses = {
    /**
     * Invoices app
     */
    200: {
        app: DTOInvoicesApp;
    };
};

export type DeleteInvoicesAppWebhookResponse = DeleteInvoicesAppWebhookResponses[keyof DeleteInvoicesAppWebhookResponses];

export type UpdateInvoicesAppWebhookData = {
    /**
     * Data that is expected
     */
    body?: DTOInvoiceWebhook;
    path: {
        /**
         * App ID
         */
        id: number;
        /**
         * Webhook ID
         */
        webhook_id: string;
    };
    query?: never;
    url: '/api/v1/services/invoices/app/{id}/webhook/{webhook_id}';
};

export type UpdateInvoicesAppWebhookErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateInvoicesAppWebhookError = UpdateInvoicesAppWebhookErrors[keyof UpdateInvoicesAppWebhookErrors];

export type UpdateInvoicesAppWebhookResponses = {
    /**
     * Invoices app
     */
    200: {
        app: DTOInvoicesApp;
    };
};

export type UpdateInvoicesAppWebhookResponse = UpdateInvoicesAppWebhookResponses[keyof UpdateInvoicesAppWebhookResponses];

export type GetInvoicesAppTokenData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/invoices/token';
};

export type GetInvoicesAppTokenErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetInvoicesAppTokenError = GetInvoicesAppTokenErrors[keyof GetInvoicesAppTokenErrors];

export type GetInvoicesAppTokenResponses = {
    /**
     * Invoices app token
     */
    200: {
        token: string;
    };
};

export type GetInvoicesAppTokenResponse = GetInvoicesAppTokenResponses[keyof GetInvoicesAppTokenResponses];

export type RegenerateInvoicesAppTokenData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/invoices/token';
};

export type RegenerateInvoicesAppTokenErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type RegenerateInvoicesAppTokenError = RegenerateInvoicesAppTokenErrors[keyof RegenerateInvoicesAppTokenErrors];

export type RegenerateInvoicesAppTokenResponses = {
    /**
     * Invoices app token
     */
    200: {
        token: string;
    };
};

export type RegenerateInvoicesAppTokenResponse = RegenerateInvoicesAppTokenResponses[keyof RegenerateInvoicesAppTokenResponses];

export type CreateInvoicesInvoiceData = {
    /**
     * Data that is expected
     */
    body?: DTOInvoiceCreate;
    path?: never;
    query?: {
        /**
         * App ID
         */
        app_id?: number;
    };
    url: '/api/v1/services/invoices/invoice';
};

export type CreateInvoicesInvoiceErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateInvoicesInvoiceError = CreateInvoicesInvoiceErrors[keyof CreateInvoicesInvoiceErrors];

export type CreateInvoicesInvoiceResponses = {
    /**
     * Service invoices fee
     */
    201: DTOInvoicesInvoice;
};

export type CreateInvoicesInvoiceResponse = CreateInvoicesInvoiceResponses[keyof CreateInvoicesInvoiceResponses];

export type GetInvoicesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
        /**
         * Field
         */
        field_order?: DTOInvoiceFieldOrder;
        /**
         * Type order
         */
        type_order?: 'asc' | 'desc';
        /**
         * Search ID
         */
        search_id?: string;
        /**
         * Filter status
         */
        filter_status?: Array<DTOInvoiceStatus>;
        /**
         * Currency
         */
        currency?: DTOCryptoCurrency;
        /**
         * Overpayment
         */
        overpayment?: boolean;
        /**
         * Start date
         */
        start?: number;
        /**
         * End date
         */
        end?: number;
    };
    url: '/api/v1/services/invoices';
};

export type GetInvoicesErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetInvoicesError = GetInvoicesErrors[keyof GetInvoicesErrors];

export type GetInvoicesResponses = {
    /**
     * Invoices
     */
    200: {
        items: Array<DTOInvoicesInvoice>;
        count: number;
    };
};

export type GetInvoicesResponse = GetInvoicesResponses[keyof GetInvoicesResponses];

export type GetInvoicesInvoiceData = {
    body?: never;
    path: {
        /**
         * Invoice ID
         */
        id: string;
    };
    query?: {
        /**
         * App ID
         */
        app_id?: number;
    };
    url: '/api/v1/services/invoices/{id}';
};

export type GetInvoicesInvoiceErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetInvoicesInvoiceError = GetInvoicesInvoiceErrors[keyof GetInvoicesInvoiceErrors];

export type GetInvoicesInvoiceResponses = {
    /**
     * Service invoices fee
     */
    200: DTOInvoicesInvoice;
};

export type GetInvoicesInvoiceResponse = GetInvoicesInvoiceResponses[keyof GetInvoicesInvoiceResponses];

export type UpdateInvoicesInvoiceData = {
    /**
     * Data that is expected
     */
    body?: DTOInvoiceChange;
    path: {
        /**
         * Invoice ID
         */
        id: string;
    };
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/invoices/{id}';
};

export type UpdateInvoicesInvoiceErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateInvoicesInvoiceError = UpdateInvoicesInvoiceErrors[keyof UpdateInvoicesInvoiceErrors];

export type UpdateInvoicesInvoiceResponses = {
    /**
     * Service invoices fee
     */
    200: DTOInvoicesInvoice;
};

export type UpdateInvoicesInvoiceResponse = UpdateInvoicesInvoiceResponses[keyof UpdateInvoicesInvoiceResponses];

export type CancelInvoicesInvoiceData = {
    body?: never;
    path: {
        /**
         * Invoice ID
         */
        id: string;
    };
    query: {
        /**
         * App ID
         */
        app_id: number;
    };
    url: '/api/v1/services/invoices/{id}/cancel';
};

export type CancelInvoicesInvoiceErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CancelInvoicesInvoiceError = CancelInvoicesInvoiceErrors[keyof CancelInvoicesInvoiceErrors];

export type CancelInvoicesInvoiceResponses = {
    /**
     * Service invoices fee
     */
    200: DTOInvoicesInvoice;
};

export type CancelInvoicesInvoiceResponse = CancelInvoicesInvoiceResponses[keyof CancelInvoicesInvoiceResponses];

export type GetInvoicesStatsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
        /**
         * Currency
         */
        currency?: DTOCryptoCurrency;
    };
    url: '/api/v1/services/invoices/stats';
};

export type GetInvoicesStatsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetInvoicesStatsError = GetInvoicesStatsErrors[keyof GetInvoicesStatsErrors];

export type GetInvoicesStatsResponses = {
    /**
     * Invoices stats
     */
    200: {
        stats: {
            total: number;
            success_total: number;
            success_in_week: number;
            invoices_in_progress: number;
            total_amount_pending: number;
            currency: DTOCryptoCurrency;
        };
    };
};

export type GetInvoicesStatsResponse = GetInvoicesStatsResponses[keyof GetInvoicesStatsResponses];

export type ExportInvoicesCsvData = {
    body?: never;
    path?: never;
    query: {
        /**
         * App ID
         */
        app_id: number;
        /**
         * Field
         */
        field_order?: DTOInvoiceFieldOrder;
        /**
         * Type order
         */
        type_order?: 'asc' | 'desc';
        /**
         * Search ID
         */
        search_id?: string;
        /**
         * Filter status
         */
        filter_status?: Array<DTOInvoiceStatus>;
        /**
         * Overpayment
         */
        overpayment?: boolean;
        /**
         * Start date
         */
        start?: number;
        /**
         * End date
         */
        end?: number;
        /**
         * Currency
         */
        currency?: DTOCryptoCurrency;
    };
    url: '/api/v1/services/invoices/export';
};

export type ExportInvoicesCsvErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type ExportInvoicesCsvError = ExportInvoicesCsvErrors[keyof ExportInvoicesCsvErrors];

export type ExportInvoicesCsvResponses = {
    /**
     * Invoices CSV
     */
    200: Blob | File;
};

export type ExportInvoicesCsvResponse = ExportInvoicesCsvResponses[keyof ExportInvoicesCsvResponses];

export type GetCNftConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/services/cnft/config';
};

export type GetCNftConfigErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetCNftConfigError = GetCNftConfigErrors[keyof GetCNftConfigErrors];

export type GetCNftConfigResponses = {
    /**
     * Compress NFT config
     */
    200: {
        usd_price_per_nft: number;
    };
};

export type GetCNftConfigResponse = GetCNftConfigResponses[keyof GetCNftConfigResponses];

export type GetInfoCNftCollectionAccountData = {
    body?: never;
    path: {
        /**
         * Account
         */
        account: string;
    };
    query?: never;
    url: '/api/v1/services/cnft/collection/{account}';
};

export type GetInfoCNftCollectionAccountErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetInfoCNftCollectionAccountError = GetInfoCNftCollectionAccountErrors[keyof GetInfoCNftCollectionAccountErrors];

export type GetInfoCNftCollectionAccountResponses = {
    /**
     * Compress NFT collection
     */
    200: DTOCnftCollection;
};

export type GetInfoCNftCollectionAccountResponse = GetInfoCNftCollectionAccountResponses[keyof GetInfoCNftCollectionAccountResponses];

export type IndexingCNftCollectionData = {
    /**
     * Data that is expected
     */
    body?: DTOCnftIndexing;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/cnft/indexing';
};

export type IndexingCNftCollectionErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type IndexingCNftCollectionError = IndexingCNftCollectionErrors[keyof IndexingCNftCollectionErrors];

export type IndexingCNftCollectionResponses = {
    /**
     * Compress NFT collection
     */
    200: DTOCnftCollection;
};

export type IndexingCNftCollectionResponse = IndexingCNftCollectionResponses[keyof IndexingCNftCollectionResponses];

export type GetPaidCNftCollectionsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/cnft/paid';
};

export type GetPaidCNftCollectionsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetPaidCNftCollectionsError = GetPaidCNftCollectionsErrors[keyof GetPaidCNftCollectionsErrors];

export type GetPaidCNftCollectionsResponses = {
    /**
     * cNFT collections
     */
    200: {
        items: Array<DTOCnftCollection>;
    };
};

export type GetPaidCNftCollectionsResponse = GetPaidCNftCollectionsResponses[keyof GetPaidCNftCollectionsResponses];

export type GetMintlessJettonConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/services/mintless/config';
};

export type GetMintlessJettonConfigErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetMintlessJettonConfigError = GetMintlessJettonConfigErrors[keyof GetMintlessJettonConfigErrors];

export type GetMintlessJettonConfigResponses = {
    /**
     * Mintless Jetton config
     */
    200: {
        usd_price_per_jetton: number;
    };
};

export type GetMintlessJettonConfigResponse = GetMintlessJettonConfigResponses[keyof GetMintlessJettonConfigResponses];

export type GetPaidMintlessJettonsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/mintless/paid';
};

export type GetPaidMintlessJettonsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetPaidMintlessJettonsError = GetPaidMintlessJettonsErrors[keyof GetPaidMintlessJettonsErrors];

export type GetPaidMintlessJettonsResponses = {
    /**
     * Mintless Jettons
     */
    200: {
        jettons: Array<DTOMintlessJetton>;
    };
};

export type GetPaidMintlessJettonsResponse = GetPaidMintlessJettonsResponses[keyof GetPaidMintlessJettonsResponses];

export type CheckExistsMintlessJettonData = {
    body?: never;
    path: {
        /**
         * Account
         */
        account: string;
    };
    query?: never;
    url: '/api/v1/services/mintless/{account}';
};

export type CheckExistsMintlessJettonErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CheckExistsMintlessJettonError = CheckExistsMintlessJettonErrors[keyof CheckExistsMintlessJettonErrors];

export type CheckExistsMintlessJettonResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type CheckExistsMintlessJettonResponse = CheckExistsMintlessJettonResponses[keyof CheckExistsMintlessJettonResponses];

export type GetJettonsByOwnerData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Address
         */
        address: string;
    };
    url: '/api/v1/services/minter/owner/jettons';
};

export type GetJettonsByOwnerErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetJettonsByOwnerError = GetJettonsByOwnerErrors[keyof GetJettonsByOwnerErrors];

export type GetJettonsByOwnerResponses = {
    /**
     * Accounts
     */
    200: {
        items: Array<DTOAccount>;
    };
};

export type GetJettonsByOwnerResponse = GetJettonsByOwnerResponses[keyof GetJettonsByOwnerResponses];

export type UploadMinterJettonMediaData = {
    /**
     * Data that is expected
     */
    body?: DTOJettonMedia;
    path?: never;
    query?: never;
    url: '/api/v1/services/minter/jetton/media';
};

export type UploadMinterJettonMediaErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UploadMinterJettonMediaError = UploadMinterJettonMediaErrors[keyof UploadMinterJettonMediaErrors];

export type UploadMinterJettonMediaResponses = {
    /**
     * URL
     */
    201: DTOURL;
};

export type UploadMinterJettonMediaResponse = UploadMinterJettonMediaResponses[keyof UploadMinterJettonMediaResponses];

export type UploadMinterJettonMetaData = {
    /**
     * Data that is expected
     */
    body?: DTOJettonMeta;
    path?: never;
    query?: never;
    url: '/api/v1/services/minter/jetton/meta';
};

export type UploadMinterJettonMetaErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UploadMinterJettonMetaError = UploadMinterJettonMetaErrors[keyof UploadMinterJettonMetaErrors];

export type UploadMinterJettonMetaResponses = {
    /**
     * URL
     */
    201: DTOURL;
};

export type UploadMinterJettonMetaResponse = UploadMinterJettonMetaResponses[keyof UploadMinterJettonMetaResponses];

export type GetJettonAirdropsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/airdrops/jettons';
};

export type GetJettonAirdropsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetJettonAirdropsError = GetJettonAirdropsErrors[keyof GetJettonAirdropsErrors];

export type GetJettonAirdropsResponses = {
    /**
     * Jetton airdrops
     */
    200: {
        airdrops: Array<DTOJettonAirdrop>;
    };
};

export type GetJettonAirdropsResponse = GetJettonAirdropsResponses[keyof GetJettonAirdropsResponses];

export type CreateJettonAirdropData = {
    /**
     * Data that is expected
     */
    body: DTONewJettonAirdrop;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/airdrops/jettons';
};

export type CreateJettonAirdropErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateJettonAirdropError = CreateJettonAirdropErrors[keyof CreateJettonAirdropErrors];

export type CreateJettonAirdropResponses = {
    /**
     * Created jetton airdrop
     */
    201: {
        airdrop: DTOJettonAirdrop;
    };
};

export type CreateJettonAirdropResponse = CreateJettonAirdropResponses[keyof CreateJettonAirdropResponses];

export type GetTonSitesData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/sites';
};

export type GetTonSitesErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type GetTonSitesError = GetTonSitesErrors[keyof GetTonSitesErrors];

export type GetTonSitesResponses = {
    /**
     * Ton Sites
     */
    200: {
        items: Array<DTOTonSite>;
    };
};

export type GetTonSitesResponse = GetTonSitesResponses[keyof GetTonSitesResponses];

export type CreateTonSiteData = {
    /**
     * Data that is expected
     */
    body?: DTONewTonSiteDomain;
    path?: never;
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/sites';
};

export type CreateTonSiteErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type CreateTonSiteError = CreateTonSiteErrors[keyof CreateTonSiteErrors];

export type CreateTonSiteResponses = {
    /**
     * Created Ton Site
     */
    201: {
        site: DTOTonSite;
    };
};

export type CreateTonSiteResponse = CreateTonSiteResponses[keyof CreateTonSiteResponses];

export type DeleteTonSiteData = {
    body?: never;
    path: {
        /**
         * Site ID
         */
        id: string;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/sites/{id}';
};

export type DeleteTonSiteErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type DeleteTonSiteError = DeleteTonSiteErrors[keyof DeleteTonSiteErrors];

export type DeleteTonSiteResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type DeleteTonSiteResponse = DeleteTonSiteResponses[keyof DeleteTonSiteResponses];

export type UpdateTonSitesEndpointsData = {
    /**
     * Data that is expected
     */
    body?: DTOTonSiteEndpoints;
    path: {
        /**
         * Site ID
         */
        id: string;
    };
    query: {
        /**
         * Project ID
         */
        project_id: number;
    };
    url: '/api/v1/services/sites/{id}/endpoints';
};

export type UpdateTonSitesEndpointsErrors = {
    /**
     * Something went wrong on client side
     */
    400: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Access token is missing or invalid
     */
    403: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * The specified resource was not found
     */
    404: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
    /**
     * Something went wrong on server side
     */
    500: {
        /**
         * Error message
         */
        error: string;
        /**
         * backend error code
         */
        code: number;
    };
};

export type UpdateTonSitesEndpointsError = UpdateTonSitesEndpointsErrors[keyof UpdateTonSitesEndpointsErrors];

export type UpdateTonSitesEndpointsResponses = {
    /**
     * Ok
     */
    200: DTOOk;
};

export type UpdateTonSitesEndpointsResponse = UpdateTonSitesEndpointsResponses[keyof UpdateTonSitesEndpointsResponses];
